{"meta":{"title":"biglovewheat","subtitle":"","description":"","author":"biglovewheat","url":"https://biglovewheat.gihub.io","root":"/"},"pages":[{"title":"分类","date":"2022-07-25T08:47:31.000Z","updated":"2022-07-26T03:10:57.675Z","comments":true,"path":"categories/index.html","permalink":"https://biglovewheat.gihub.io/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2022-07-25T08:39:39.000Z","updated":"2022-07-26T03:08:43.741Z","comments":true,"path":"tags/index.html","permalink":"https://biglovewheat.gihub.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"shell循环例子","slug":"shell循环例子","date":"2022-08-01T07:19:52.825Z","updated":"2022-08-01T07:19:01.000Z","comments":true,"path":"2022/08/01/shell循环例子/","link":"","permalink":"https://biglovewheat.gihub.io/2022/08/01/shell%E5%BE%AA%E7%8E%AF%E4%BE%8B%E5%AD%90/","excerpt":"","text":"shell循环例子for循环123456789# exmple 1for row in $(cat aa.txt);do echo $row ;sleep 2; done# exmple 3for ((i=1; i&lt;=100; i ++))do echo $idone while循环12345678# exmple 1while true; do date; uptime; sleep 5; done# exmple 2cat a.txt | while read rowdo echo $rowdone","categories":[{"name":"shell","slug":"shell","permalink":"https://biglovewheat.gihub.io/categories/shell/"}],"tags":[{"name":"shell","slug":"shell","permalink":"https://biglovewheat.gihub.io/tags/shell/"}]},{"title":"Oracle用户管理","slug":"oracle用户管理","date":"2022-08-01T07:19:52.339Z","updated":"2022-08-01T07:18:51.000Z","comments":true,"path":"2022/08/01/oracle用户管理/","link":"","permalink":"https://biglovewheat.gihub.io/2022/08/01/oracle%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86/","excerpt":"","text":"Oracle用户管理创建只读用户123456create user query identified by query default tablespace cc;grant connect to query ;grant SELECT ANY TABLE to query;--grant select on aaa to query;--数据字典权限grant select any dictionary to query; 创建sysdba权限用户123create user zdbackup identified by zdbackup ;grant sysdba to zdbackup;grant create session, connect, resource to zdbackup ; 用户解锁1alter user scott account unlock; 用户更改密码1alter user user01 identified by user10; 不知道密码的情况下，修改新密码等于旧密码123select * from dba_users;FSSC_LINK 737A7F19A6C8315Balter user FSSC_LINK identified by values &#x27;737A7F19A6C8315B&#x27;; 删除用户1drop user xxxDROP USER XXx CASCADE","categories":[{"name":"oracle","slug":"oracle","permalink":"https://biglovewheat.gihub.io/categories/oracle/"}],"tags":[{"name":"oracle","slug":"oracle","permalink":"https://biglovewheat.gihub.io/tags/oracle/"}]},{"title":"Mysql数据导入导出","slug":"mysql文本导入导出","date":"2022-08-01T07:19:51.917Z","updated":"2022-08-01T07:18:54.000Z","comments":true,"path":"2022/08/01/mysql文本导入导出/","link":"","permalink":"https://biglovewheat.gihub.io/2022/08/01/mysql%E6%96%87%E6%9C%AC%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA/","excerpt":"","text":"Mysql数据导入导出导出到文本1234567891011SOURCE_USER=rootSOURCE_DB=aaOUTFILE=aa.txtLoG=aa.log#分隔符|mysql -u$SOURCE_USER -D$SOURCE_DB &lt;&lt;! 2&gt;&gt; $LOG 1&gt;&amp;2select tablename,keymap from cut_table where iskeymap=1into outfile &quot;$OUTFILE&quot;FIELDS TERMINATED BY &#x27;|&#x27; ;! 导入文本12345678910SOURCE_USER=rootSOURCE_DB=aaOUTFILE=aa.txtLoG=aa.log#分隔符|mysql -u$SOURCE_USER -D$SOURCE_DB &lt;&lt;! 2&gt;&gt; $LOG 1&gt;&amp;2load data infile &#x27;$OUTFILE&#x27; into table cut_pkey fields terminated by &#x27;|&#x27;(dbname,list_code,pkeyname,pkeyvalue,status);!","categories":[{"name":"mysql","slug":"mysql","permalink":"https://biglovewheat.gihub.io/categories/mysql/"}],"tags":[{"name":"shell","slug":"shell","permalink":"https://biglovewheat.gihub.io/tags/shell/"},{"name":"mysql","slug":"mysql","permalink":"https://biglovewheat.gihub.io/tags/mysql/"}]},{"title":"Mysql实现dblink","slug":"mysql实现dblink","date":"2022-08-01T07:19:51.021Z","updated":"2022-08-01T07:18:58.000Z","comments":true,"path":"2022/08/01/mysql实现dblink/","link":"","permalink":"https://biglovewheat.gihub.io/2022/08/01/mysql%E5%AE%9E%E7%8E%B0dblink/","excerpt":"","text":"Mysql实现dblink版本1Server version: 8.0.23 MySQL Community Server - GPL 查看引擎12345678910111213141516show engines;+--------------------+---------+----------------------------------------------------------------+--------------+------+------------+| Engine | Support | Comment | Transactions | XA | Savepoints |+--------------------+---------+----------------------------------------------------------------+--------------+------+------------+| ARCHIVE | YES | Archive storage engine | NO | NO | NO || BLACKHOLE | YES | /dev/null storage engine (anything you write to it disappears) | NO | NO | NO || MRG_MYISAM | YES | Collection of identical MyISAM tables | NO | NO | NO || FEDERATED | NO | Federated MySQL storage engine | NULL | NULL | NULL || MyISAM | YES | MyISAM storage engine | NO | NO | NO || PERFORMANCE_SCHEMA | YES | Performance Schema | NO | NO | NO || InnoDB | DEFAULT | Supports transactions, row-level locking, and foreign keys | YES | YES | YES || MEMORY | YES | Hash based, stored in memory, useful for temporary tables | NO | NO | NO || CSV | YES | CSV storage engine | NO | NO | NO |+--------------------+---------+----------------------------------------------------------------+--------------+------+------------+#federated 有安装但没有开启 设置参数并重启数据库123echo &quot;federated&quot; &gt;&gt;/etc/my.cnfsystemctl restart mysqld 例子12345CREATE TABLE `t_tasks_operate` ( `id` bigint NOT NULL COMMENT &#x27;主键ID&#x27;, `tasks_id` bigint DEFAULT NULL COMMENT &#x27;调度任务id&#x27;, KEY `tasks_id_index` (`tasks_id`) USING BTREE) ENGINE=FEDERATED DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci ROW_FORMAT=COMPACT CONNECTION=&#x27;mysql://root:123456@192.168.1.1:3306/farm_test/t_tasks_operate&#x27; ;","categories":[{"name":"mysql","slug":"mysql","permalink":"https://biglovewheat.gihub.io/categories/mysql/"}],"tags":[{"name":"mysql","slug":"mysql","permalink":"https://biglovewheat.gihub.io/tags/mysql/"}]},{"title":"Mysql数据同步脚本","slug":"mysql数据同步脚本","date":"2022-08-01T07:10:30.586Z","updated":"2022-08-01T06:36:13.000Z","comments":true,"path":"2022/08/01/mysql数据同步脚本/","link":"","permalink":"https://biglovewheat.gihub.io/2022/08/01/mysql%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5%E8%84%9A%E6%9C%AC/","excerpt":"","text":"Mysql数据同步脚本用mysqldump同步两个数据库 结构12345├── db.lst ## 数据库对照表├── ignore-table.lst ## 只同步结构，不同步数据的表├── mysql_sync.sh ## 主程序├── source.lst ## 源数据库的配置信息└── target.lst ## 目标数据库的配置信息 配置文件1234567891011121314151617181920212223242526272829# cat db.lst##sourcedb|targetdbtelematics|telematicsiot_sit|iotbaseinfo_sit|base_info# cat ignore-table.lst #sourcedb.tablefarm_sit.t_task_machinery_msg_log_20220511smart_farm_test.t_ag_machinery_work_logfarm_sit.t_task_machinery_msg_logsmart_farm_test.um_user_action_logfarm_sit.t_synergy_task_realtime_infosmart_farm_test.t_drainirrigate_eq_log# cat source.lst[client]user=superpassword=123456host=172.31.40.125port=3306# cat target.lst [client]user=rootpassword=123456host=localhostport=3306 脚本123456789101112131415161718192021222324252627282930#!/bin/bashfor db in $(cat db.lst|grep -v ^#)dosdb=$(echo $db|awk -F\\| &#x27;&#123;print $1&#125;&#x27;)tdb=$(echo $db|awk -F\\| &#x27;&#123;print $2&#125;&#x27;)dateecho &quot;sync $sdb --&gt; $tdb &quot;echo &quot;drop database if exists \\`$tdb\\`;&quot;|mysql --defaults-extra-file=target.lstecho &quot;create database \\`$tdb\\`;&quot;|mysql --defaults-extra-file=target.lstif grep -q $x ^$sdb ignore-table.lstthenfor row in $(grep ^$sdb ignore-table.lst)dorow1=$(echo row |awk -F\\. &#x27;&#123;print $2&#125;&#x27;)row2=$rowstr1=$str1&quot; &quot;$row1str2=$str2&quot; --ignore-table &quot;$row2doneecho $str1 $str2mysqldump --defaults-extra-file=source.lst --opt $sdb --tables $str1 --no-data| mysql --defaults-extra-file=target.lst -C $tdbfimysqldump --defaults-extra-file=source.lst --opt $sdb $str2 | mysql --defaults-extra-file=target.lst -C $tdb## no data#mysqldump --defaults-extra-file=source.lst --opt $sdb $str2 --no-data | mysql --defaults-extra-file=target.lst -C $tdbdone","categories":[{"name":"mysql","slug":"mysql","permalink":"https://biglovewheat.gihub.io/categories/mysql/"}],"tags":[{"name":"shell","slug":"shell","permalink":"https://biglovewheat.gihub.io/tags/shell/"},{"name":"mysql","slug":"mysql","permalink":"https://biglovewheat.gihub.io/tags/mysql/"}]},{"title":"rsync同步","slug":"rsync同步","date":"2022-07-27T05:58:10.731Z","updated":"2022-07-27T00:30:25.000Z","comments":true,"path":"2022/07/27/rsync同步/","link":"","permalink":"https://biglovewheat.gihub.io/2022/07/27/rsync%E5%90%8C%E6%AD%A5/","excerpt":"","text":"rsync同步安装1yum install -y rsync 参数123456789-a 归档模式-v 详细模式-z 传输过程中压缩-u 更新模式-t 保持文件时间-P 显示进度--progress 显示过程中的状态--delete 实现无差异数据同步，删掉dst的文件--exclude 排除,目录相对于src目录 例子123rsync -avzut -P --progress /data/aaa/ root@10.9.127.33:/data/bbb/rsync -avzut -P --progress /var/lib/jenkins/ ops_root@172.31.51.65:/data/backup/jenkins/ --exclude workspace --exclude .cache --exclude .npm 排除列表脚本1234567891011121314151617181920212223242526## 排除列表cat sync_gis.exclude.lstgeoserver/8083/geoserver/8084/logs/geoserver/8084/temp/geoserver/6066/logs/geoserver/6066/temp/geoserver/data/data_8083/#geoserver/data/data_6066/data/test0903geoserver/data/data_6066/logs/geoserver/data/data_6066/gwc/geoserver/data/data_8084/logs/geoserver/data/data_8084/gwc/##!/bin/shdateCMDSTR=&#x27;cd /home/gis/server;rsync -avzut geoserver /s3mnt/gis_data/&#x27;for row in $(cat sync_gis.exclude.lst |grep -v ^# |grep -v ^$);do CMDSTR=$CMDSTR&quot; --exclude &quot;$rowdoneecho $CMDSTR |sh","categories":[{"name":"linux","slug":"linux","permalink":"https://biglovewheat.gihub.io/categories/linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://biglovewheat.gihub.io/tags/linux/"},{"name":"backup","slug":"backup","permalink":"https://biglovewheat.gihub.io/tags/backup/"}]},{"title":"Python-查数据库-邮件告警","slug":"python-查数据库-邮件告警","date":"2022-07-27T05:58:10.255Z","updated":"2022-07-27T00:39:35.000Z","comments":true,"path":"2022/07/27/python-查数据库-邮件告警/","link":"","permalink":"https://biglovewheat.gihub.io/2022/07/27/python-%E6%9F%A5%E6%95%B0%E6%8D%AE%E5%BA%93-%E9%82%AE%E4%BB%B6%E5%91%8A%E8%AD%A6/","excerpt":"","text":"Python-查数据库-邮件告警一个python写的简单的查数据库脚本，配合crontab和邮件实现定时监控和告警。 监控脚本12345678910111213141516171819202122232425262728293031#!/opt/python3/bin/python3import smtplibfrom email.mime.text import MIMETextimport pymysqlimport datetimedd=(datetime.datetime.now()+datetime.timedelta(days=-1)).strftime(&quot;%Y-%m-%d&quot;)print (dd)db = pymysql.Connect(host=&#x27;10.0.0.1&#x27;,port=3306,user=&#x27;root&#x27;,passwd=&#x27;123456&#x27;,db=&#x27;testdb&#x27;,charset=&#x27;utf8&#x27;)cursor = db.cursor()sql = &quot;select * from t_farm where time=&#x27;&quot;+dd+&quot;&#x27;;&quot;cursor.execute(sql)row=cursor.rowcount#print (row)if row == 0 : msg = MIMEText(dd+&#x27;的条目数是: &#x27;+str(row)+&#x27; ,请检查。&#x27;,&#x27;plain&#x27;,&#x27;utf-8&#x27;) from_addr = &#x27;biglovewheat@126.com&#x27; password = &#x27;GQYRFCDKEXEIHQGH&#x27; ## 邮箱的授权密码，非用户密码 to_addr = [&#x27;biglovewheat@126.com&#x27;,&#x27;aa@126.com&#x27;] smtp_server = &#x27;smtp.126.com&#x27; msg[&#x27;From&#x27;] = from_addr msg[&#x27;To&#x27;] = &#x27;,&#x27;.join(to_addr) msg[&#x27;Subject&#x27;] = &#x27;Python脚本告警&#x27; server = smtplib.SMTP_SSL(smtp_server,465) server.login(from_addr,password) server.sendmail(from_addr,to_addr,msg.as_string()) server.quit() crontab131 4 * * * /data/app/moni.py &gt;&gt; /data/app/moni.log 2&gt;&amp;1","categories":[{"name":"监控","slug":"监控","permalink":"https://biglovewheat.gihub.io/categories/%E7%9B%91%E6%8E%A7/"}],"tags":[{"name":"监控","slug":"监控","permalink":"https://biglovewheat.gihub.io/tags/%E7%9B%91%E6%8E%A7/"},{"name":"Python","slug":"Python","permalink":"https://biglovewheat.gihub.io/tags/Python/"}]},{"title":"prometheus-mysql-监控","slug":"prometheus-mysql-监控","date":"2022-07-27T05:58:09.755Z","updated":"2022-07-27T02:10:01.000Z","comments":true,"path":"2022/07/27/prometheus-mysql-监控/","link":"","permalink":"https://biglovewheat.gihub.io/2022/07/27/prometheus-mysql-%E7%9B%91%E6%8E%A7/","excerpt":"","text":"prometheus-mysql-监控mysql创建用户并授权1234drop user &#x27;exporter&#x27;@&#x27;localhost&#x27;;create user &#x27;exporter&#x27;@&#x27;localhost&#x27; identified by &#x27;123456&#x27;; GRANT REPLICATION CLIENT,PROCESS,SELECT ON *.* TO &#x27;exporter&#x27;@&#x27;localhost&#x27; ; flush privileges; mysql-exporter配置1234567891011121314151617181920212223242526# client.cnfcat &lt;&lt; EOF &gt;/opt/mysqld_exporter/.client.cnf[client]user=exporterpassword=123456EOF# systemctl配置cat &lt;&lt; EOF &gt;/usr/lib/systemd/system/mysqld_exporter.service[Unit]Description= Prometheus MySQL ExporterWants=network-online.targetAfter=network-online.target[Service]User=rootGroup=rootType=simpleRestart=alwaysExecStart=/opt/mysqld_exporter/mysqld_exporter \\--config.my-cnf /opt/mysqld_exporter/.client.cnf \\--web.listen-address=0.0.0.0:51235[Install]WantedBy=multi-user.targetEOF prometheus配置12345# 增加配置并重启prometheusprometheus 配置 - job_name: mysql static_configs: - targets: [&#x27;172.31.40.125:51235&#x27;, &#x27;172.31.36.28:51235&#x27;] grafana配置grafana.com&#x2F;grafana&#x2F;dashboards&#x2F; alert-manager告警配置待补充","categories":[{"name":"监控","slug":"监控","permalink":"https://biglovewheat.gihub.io/categories/%E7%9B%91%E6%8E%A7/"}],"tags":[{"name":"prometheus","slug":"prometheus","permalink":"https://biglovewheat.gihub.io/tags/prometheus/"},{"name":"mysql","slug":"mysql","permalink":"https://biglovewheat.gihub.io/tags/mysql/"}]},{"title":"MinIO集群安装","slug":"minio集群安装","date":"2022-07-27T05:58:09.261Z","updated":"2022-07-27T01:34:53.000Z","comments":true,"path":"2022/07/27/minio集群安装/","link":"","permalink":"https://biglovewheat.gihub.io/2022/07/27/minio%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85/","excerpt":"","text":"MinIO集群安装官方文档https://docs.min.io/minio/baremetal/installation/deploy-minio-distributed.html#deploy-minio-distributed 集群信息12345## 集群至少需要4个文件系统，可用空间为4台空间之和的一半，&gt;=2台，数据可读，&gt;=3台，数据可读写http://172.31.62.161/data/minio/cluster_datahttp://172.31.56.16/data/minio/cluster_datahttp://172.31.57.206/data/minio/cluster_datahttp://172.31.36.28/data/minio/cluster_data 下载1234wget https://dl.min.io/server/minio/release/linux-amd64/miniochmod +x miniowget https://dl.min.io/client/mc/release/linux-amd64/mcchmod +x mc 启动脚本1234567891011cat &lt;&lt; EOF &gt; startup.shexport MINIO_ROOT_USER=&#x27;minioadmin&#x27;export MINIO_ROOT_PASSWORD=&#x27;minioadmin&#x27;nohup /data/minio/minio server --address &quot;:29000&quot; --console-address &quot;:29001&quot; \\http://172.31.62.161/data/minio/cluster_data http://172.31.56.16/data/minio/cluster_data \\http://172.31.57.206/data/minio/cluster_data http://172.31.36.28/data/minio/cluster_data \\&gt;&gt; /data/minio/minio.log 2&gt;&amp;1 &amp;EOFchmod u+x startup.sh 常用操作1234567891011121314### 导入信息（别名）./mc alias set minio-cluster http://172.31.62.161:29000 minioadmin minioadmin./mc alias set XXXX http://XXXX.s3.cn-northwest-1.amazonaws.com.cn/ AXXXXXXX## 列出别名./mc alias list## 查看集群信息./mc admin info hxs3./mc admin info minio-cluster## 对拷./mc mirror minio-prod minio-cluster./mc mirror minio-prod minio-cluster --overwrite","categories":[{"name":"linux","slug":"linux","permalink":"https://biglovewheat.gihub.io/categories/linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://biglovewheat.gihub.io/tags/linux/"},{"name":"FS","slug":"FS","permalink":"https://biglovewheat.gihub.io/tags/FS/"}]},{"title":"AWS-EBS-磁盘管理","slug":"aws-ebs-磁盘管理","date":"2022-07-27T05:58:08.735Z","updated":"2022-07-27T01:02:19.000Z","comments":true,"path":"2022/07/27/aws-ebs-磁盘管理/","link":"","permalink":"https://biglovewheat.gihub.io/2022/07/27/aws-ebs-%E7%A3%81%E7%9B%98%E7%AE%A1%E7%90%86/","excerpt":"","text":"AWS-EBS-磁盘管理扩容控制台–&gt;EBS–&gt;volumes–&gt;select ebs–&gt;modify volume，修改后等待卷状态变为正常 123456789101112131415## 查看块设备情况[root@ip-172-31-40-27 ~]# lsblkNAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINTnvme0n1 259:0 0 100G 0 disk├─nvme0n1p1 259:1 0 1M 0 part└─nvme0n1p2 259:2 0 40G 0 part /## 如果是有分区的，把空间分配到对应分区，如disk没有分区，这一步省略sudo growpart /dev/nvme0n1 2## 再增加到对应的文件系统# xfssudo xfs_growfs -d /# ext4sudo resize2fs /dev/nvme0n1p2 新曾磁盘控制台–&gt;EBS–&gt;卷–&gt;创建卷 123456789101112## 查看块设备情况lsblk## 创建挂载点目录mkdir /data## 格式化（xfs）mkfs -t xfs /dev/nvme1n1## 查看uuidblkid## 启动挂载vi /etc/fstabUUID=0cbb74bd-9c5c-4789-8d59-cb6bb2d1038e /data xfs defaults 0 0mount -a 问题12345678910111213## 1xfs_growfs# 错误：unexpected output in sfdisk --version# 解决export LANG=en_US.UTF-8## 2# 相关工具包# centossudo yum install xfsprogs# ubuntuapt install cloud-guest-utils","categories":[{"name":"AWS","slug":"AWS","permalink":"https://biglovewheat.gihub.io/categories/AWS/"}],"tags":[{"name":"AWS","slug":"AWS","permalink":"https://biglovewheat.gihub.io/tags/AWS/"},{"name":"linux","slug":"linux","permalink":"https://biglovewheat.gihub.io/tags/linux/"}]},{"title":"shell并发执行","slug":"shell-并发处理","date":"2022-07-26T08:12:30.719Z","updated":"2022-07-26T07:25:21.000Z","comments":true,"path":"2022/07/26/shell-并发处理/","link":"","permalink":"https://biglovewheat.gihub.io/2022/07/26/shell-%E5%B9%B6%E5%8F%91%E5%A4%84%E7%90%86/","excerpt":"","text":"shell并发处理并发执行12345678910111213141516171819202122[root@std_centos test]# cat aa.shf1()&#123;tail -f 1.txt&#125;f2()&#123;tail -f 2.txt&#125;f3()&#123;tail -f 3.txt&#125;f4()&#123;echo &quot;finished&quot;&#125;f1 &amp; #f1-f3 并发执行f2 &amp;f3 &amp;wait #wait的作用：等待前面的函数执行完成f4 #最后执行f4 控制并发进程数12345678910111213141516171819202122[root@std_centos test]# cat cc.shtempfifo=/tmp/$$.fifo ##获取当前程序的pid，以pid作为文件名，防止重复。mkfifo $tempfifo ##创建有名管道文件exec 1000&lt;&gt;$tempfifo ##将文件描述符1000与管道文件关联rm -rf $tempfifo ##删除管道文件，只保留文件描述符for ((i=1; i&lt;=3; i++)) ##写入3行（空行）到文件描述符1000doecho &gt;&amp;1000donefor ((j=1;j&lt;=10;j++)) ##队列总共10个doread -u1000 ##读取1个空行（读取后，文件描述符减少1个空行，如没空行则hold住等待，知道有新增空行，以达到进程数控制的效果）&#123;tail -f $j.txtecho &gt;&amp;1000 ##写入1个空行（写入后，文件描述符又增加1个空行）&#125;&amp;echo &quot;running:&quot;$jdonewaitexec 1000&lt;&amp;- #关闭文件描述符的读exec 1000&gt;&amp;-echo &quot;--finished--&quot;","categories":[{"name":"shell","slug":"shell","permalink":"https://biglovewheat.gihub.io/categories/shell/"}],"tags":[{"name":"shell","slug":"shell","permalink":"https://biglovewheat.gihub.io/tags/shell/"}]},{"title":"Rocketmq-DLeger-集群安装","slug":"rocketmq-dleger-集群安装","date":"2022-07-26T08:12:30.286Z","updated":"2022-07-26T06:39:33.000Z","comments":true,"path":"2022/07/26/rocketmq-dleger-集群安装/","link":"","permalink":"https://biglovewheat.gihub.io/2022/07/26/rocketmq-dleger-%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85/","excerpt":"","text":"Rocketmq-DLeger-集群安装官方文档More Info: 官方文档 More Info: rocketmq-dashbord 部署主机123172.31.34.25 aws-sit-app-01 172.31.43.98 aws-sit-app-03172.31.43.45 aws-sit-app-04 配置文件123456789101112131415161718/data/rocketmq/conf/dledger/broker-n*.confbrokerClusterName = RaftClusterbrokerName=RaftNode00listenPort=30911namesrvAddr=172.31.34.25:9876;172.31.43.98:9876;172.31.43.45:9876storePathRootDir=/tmp/rmqstore/node00storePathCommitLog=/tmp/rmqstore/node00/commitlogenableDLegerCommitLog=truedLegerGroup=RaftNode00dLegerPeers=n0-172.31.34.25:40911;n1-172.31.43.98:40911;n2-172.31.43.45:40911##每个节点更改n0、n1、n2dLegerSelfId=n0sendMessageThreadPoolNums=4##自动创建topicautoCreateTopicEnable = true## 执行broker ip（多网卡适用）#brokerIP1=10.19.73.64 启动脚本1234567891011#!/bin/shexport JAVA_HOME=/data/soft/jdk1.8.0_301export PATH=$JAVA_HOME/bin:$PATHROOT_PATH=/data/rocketmqnohup sh $ROOT_PATH/bin/mqnamesrv &gt; $ROOT_PATH/startup.log 2&gt;&amp;1 &amp;nohup sh $ROOT_PATH/bin/mqbroker -c $ROOT_PATH/conf/dledger/broker-n0.conf &gt;&gt; $ROOT_PATH/startup.log 2&gt;&amp;1 &amp;## mq consolenohup java -jar $ROOT_PATH/rocketmq-dashboard-1.0.1-SNAPSHOT.jar --server.port=9801 \\--rocketmq.config.namesrvAddr=tcp.farmbgy.net:29876 &gt; $ROOT_PATH/startDashboard.log 2&gt;&amp;1 &amp; service123456789101112131415161718192021cat &lt;&lt; EOF &gt; /usr/lib/systemd/system/rocketmq.service[Unit]Description=rocketmqAfter=network.target[Service]Type=forkingUser=rootExecStart=/data/rocketmq/startup.shExecStop=/data/rocketmq/stop.sh[Install]WantedBy=multi-user.targetEOFsystemctl daemon-reloadsystemctl enable rocketmqsystemctl start rocketmqsystemctl stop rocketmq","categories":[{"name":"middleware","slug":"middleware","permalink":"https://biglovewheat.gihub.io/categories/middleware/"}],"tags":[{"name":"middleware","slug":"middleware","permalink":"https://biglovewheat.gihub.io/tags/middleware/"},{"name":"mq","slug":"mq","permalink":"https://biglovewheat.gihub.io/tags/mq/"}]},{"title":"Python-端口监控-钉钉告警","slug":"python-端口监控-钉钉告警","date":"2022-07-26T08:12:29.861Z","updated":"2022-07-26T08:00:19.000Z","comments":true,"path":"2022/07/26/python-端口监控-钉钉告警/","link":"","permalink":"https://biglovewheat.gihub.io/2022/07/26/python-%E7%AB%AF%E5%8F%A3%E7%9B%91%E6%8E%A7-%E9%92%89%E9%92%89%E5%91%8A%E8%AD%A6/","excerpt":"","text":"Python-端口监控-钉钉告警一个python写的简单的端口监控例子，配合crontab和钉钉实现定时监控和告警。 配置文件12345678910111213141516171819[root@aws-sit-server-dev-01 moni]# cat moni_port.lstgis|172.31.45.42|6066gis|172.31.45.42|8083gis|172.31.45.42|8084sit-mq|172.31.40.27|9876sit-gitlab|172.31.40.27|8090sit-jenkins|172.31.40.27|8089sit-nacos|172.31.40.27|8848sit-redis|172.31.40.125|6379sit-mysql|172.31.40.125|3306sit-nexus|172.31.45.187|8081show-mq|172.31.73.65|9876show-mysql|172.31.73.65|3306show-nacos|172.31.73.65|8848show-redis|172.31.73.65|6379jx-mq|172.31.71.117|9876jx-mysql|172.31.71.117|3306jx-nacos|172.31.71.117|8848jx-redis|172.31.71.117|6378 监控脚本123456789101112131415161718192021222324252627282930313233#!/opt/python3/bin/python3import datetimeimport socket,sysimport requests,jsondef send_dingding(url, msg): headers = &#123;&#x27;Content-Type&#x27;: &#x27;application/json&#x27;&#125; data = &#123; &quot;msgtype&quot;: &quot;text&quot;, &quot;text&quot;: &#123; &quot;content&quot;: msg &#125; &#125; r = requests.post(url, headers=headers, data=json.dumps(data)) print(r.text)if __name__ == &quot;__main__&quot;: url_dingding = &#x27;https://oapi.dingtalk.com/robot/send?access_token=abcd&#x27; msg=&#x27;&#x27; with open(r&#x27;/data/moni/moni_port.lst&#x27;) as f: for row in f.readlines(): # print(row.strip()) r1,r2,r3=row.strip().split(&#x27;|&#x27;,2) moni_host=r1 moni_ip=r2 moni_port=r3 port_state=socket.socket(socket.AF_INET,socket.SOCK_STREAM).connect_ex((moni_ip,int(moni_port))) if port_state != 0 : msg=msg+moni_host+&quot; &quot;+moni_ip+&quot;:&quot;+moni_port+&quot; has been down. Please check.\\n&quot; if len(msg) &gt; 2: print(datetime.datetime.now()) print(msg) send_dingding(url_dingding,msg)","categories":[{"name":"监控","slug":"监控","permalink":"https://biglovewheat.gihub.io/categories/%E7%9B%91%E6%8E%A7/"}],"tags":[{"name":"python","slug":"python","permalink":"https://biglovewheat.gihub.io/tags/python/"},{"name":"监控","slug":"监控","permalink":"https://biglovewheat.gihub.io/tags/%E7%9B%91%E6%8E%A7/"}]},{"title":"Nacos集群配置","slug":"nacos-集群配置","date":"2022-07-26T08:12:29.437Z","updated":"2022-07-26T07:50:53.000Z","comments":true,"path":"2022/07/26/nacos-集群配置/","link":"","permalink":"https://biglovewheat.gihub.io/2022/07/26/nacos-%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE/","excerpt":"","text":"Nacos集群配置版本v1.4.1 cluster.conf配置123192.168.8.111:8848192.168.8.112:8848192.168.8.113:8848 初始化数据库1mysql -uroot -p &lt; /data/nacos/conf/nacos-mysql.sql application.properties配置，集群必须用外部存储，这里用mysql123456### Count of DB:db.num=1### Connect URL of DB:db.url.0=jdbc:mysql://192.168.8.111:3306/nacos?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useUnicode=true&amp;useSSL=false&amp;serverTimezone=UTC&amp;allowPublicKeyRetrieval=truedb.user.0=rootdb.password.0=123456 启动脚本12345678#!/bin/shexport JAVA_HOME=/data/soft/jdk-11.0.11export PATH=$JAVA_HOME/bin:$PATHexport CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar## 单机sh /data/nacos/bin/startup.sh -m standalone## 集群sh /data/nacos/bin/startup.sh","categories":[{"name":"middleware","slug":"middleware","permalink":"https://biglovewheat.gihub.io/categories/middleware/"}],"tags":[{"name":"middleware","slug":"middleware","permalink":"https://biglovewheat.gihub.io/tags/middleware/"},{"name":"nacos","slug":"nacos","permalink":"https://biglovewheat.gihub.io/tags/nacos/"}]},{"title":"Jenkins-Systemd-发布脚本","slug":"jenkins-systemd-发布脚本","date":"2022-07-26T08:12:29.011Z","updated":"2022-07-26T06:39:27.000Z","comments":true,"path":"2022/07/26/jenkins-systemd-发布脚本/","link":"","permalink":"https://biglovewheat.gihub.io/2022/07/26/jenkins-systemd-%E5%8F%91%E5%B8%83%E8%84%9A%E6%9C%AC/","excerpt":"","text":"Jenkins-Systemd-发布脚本发布脚本1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465#!/bin/bash## /data/publish.sh update js hx-basic 5 4 &quot;www-test/&quot;action=$1apptype=$2svc=$3ver=$4webpath=$6## envROOT=/data#TEMP_HOME=$ROOT/tmpcase $apptype in## java&#x27;java&#x27;) if [ ! -f /usr/lib/systemd/system/$svc.service ];then if [ ! -f $ROOT/java_demo.service ];then echo &quot;java_demo.service not found&quot;; exit ; fi sed &quot;s/__SVC__/$&#123;svc&#125;/g&quot; $ROOT/java_demo.service &gt; /usr/lib/systemd/system/$svc.service systemctl daemon-reload systemctl enable $svc.service fi case $action in &#x27;restart&#x27;) systemctl restart $svc.service ;; &#x27;update&#x27;) ln -snf $ROOT/temp/$&#123;svc&#125;-$&#123;ver&#125;.jar $ROOT/app/$&#123;svc&#125;.jar systemctl restart $svc.service ;; &#x27;stop&#x27;) systemctl stop $svc.service ;; &#x27;restore&#x27;) ver=$5 ln -snf $ROOT/temp/$&#123;svc&#125;-$&#123;ver&#125;.jar $ROOT/app/$&#123;svc&#125;.jar systemctl restart $svc.service ;; *) ;; esac;;## js&#x27;js&#x27;) case $action in update) rm -rf $ROOT/webapp/$webpath mkdir -p $ROOT/webapp/$webpath tar -xf $ROOT/temp/$svc-$ver.tgz -C $ROOT/webapp/$webpath ;; restore) ver=$5 rm -rf $ROOT/webapp/$&#123;webpath&#125; mkdir -p $ROOT/webapp/$webpath tar -xf $ROOT/temp/$svc-$ver.tgz -C $ROOT/webapp/$webpath ;; *) ;; esac;;## other*);;esac Service java_demo.service123456789101112131415161718cat &lt;&lt; EOF &gt; java_demo.service[Unit]Description=__SVC__After=network.target[Service]Type=forkingUser=rootEnvironment=&quot;SVC=__SVC__&quot;ExecStart=/data/start_jar.sh start $&#123;SVC&#125;ExecReload=/bin/kill -s HUP $MAINPIDExecStop=/bin/kill -s QUIT $MAINPID#Restart=always[Install]WantedBy=multi-user.targetEOF 启动脚本12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061#!/bin/bashsvc=$2## dirAPP_HOME=/data/appLOG_HOME=/data/logsif [ ! -d $&#123;LOG_HOME&#125;/analyzeGc ]; then mkdir -p $&#123;LOG_HOME&#125;/analyzeGc; fi## nacosexport nacos_address=&quot;172.31.71.117&quot;export nacos_port=&quot;8848&quot;export nacos_namespace=&#x27;c876967c-d8dd-4318-9bf1-e7e72eb47d13&#x27;## javaexport JAVA_HOME=/data/soft/jdk-11.0.11export PATH=$JAVA_HOME/bin:$PATHexport CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar## app envcase $svc in&#x27;hx-schedule-algorithm&#x27;)JAVA_OPS=&quot;-Xms512m -Xmx4g -Xmn1g -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=$&#123;LOG_HOME&#125;/analyzeGc/ -XX:+PrintGCDetails -verbosegc -Xloggc:$&#123;LOG_HOME&#125;/analyzeGc/gc.$&#123;svc&#125;.log&quot;;;*)JAVA_OPS=&quot;-Xms512m -Xmx2g -Xmn1g -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=$&#123;LOG_HOME&#125;/analyzeGc/ -XX:+PrintGCDetails -verbosegc -Xloggc:$&#123;LOG_HOME&#125;/analyzeGc/gc.$&#123;svc&#125;.log&quot;;;esaccase $svc in#&#x27;hx-thirdparty&#x27;|&#x27;hx-sensordata&#x27;)&#x27;hx-thirdparty&#x27;)SPRING_ENV=prod ## prod,sit,local;;*)SPRING_ENV=local ## prod,sit,local;;esaccase $1 instart) nohup java $&#123;JAVA_OPS&#125; -jar $&#123;APP_HOME&#125;/$&#123;svc&#125;.jar --spring.profiles.active=$&#123;SPRING_ENV&#125; &gt;&gt; $&#123;APP_HOME&#125;/$&#123;svc&#125;.log 2&gt;&amp;1 &amp;;;restart) $0 stop $svc sleep 2 $0 start $svc;;stop) PID=`jps |grep $&#123;svc&#125;|awk &#x27;&#123;print $1&#125;&#x27;` if [ -z &quot;$PID&quot; ]; then echo &quot;no pid found. $0 no start&quot; else kill -9 $PID &amp;&amp; echo &quot;kill pid $PID success.&quot; || echo &quot;kill pid $PID failed.&quot; fi;;*) echo &quot;Usage: $0 [start|restart|update|stop|restore|log|check]&quot; exit 0esac","categories":[{"name":"devops","slug":"devops","permalink":"https://biglovewheat.gihub.io/categories/devops/"}],"tags":[{"name":"devops","slug":"devops","permalink":"https://biglovewheat.gihub.io/tags/devops/"},{"name":"jenkins","slug":"jenkins","permalink":"https://biglovewheat.gihub.io/tags/jenkins/"},{"name":"shell","slug":"shell","permalink":"https://biglovewheat.gihub.io/tags/shell/"}]},{"title":"Jenkins-K8s-发布脚本","slug":"jenkins-k8s-发布脚本","date":"2022-07-26T08:12:28.552Z","updated":"2022-07-26T03:35:32.000Z","comments":true,"path":"2022/07/26/jenkins-k8s-发布脚本/","link":"","permalink":"https://biglovewheat.gihub.io/2022/07/26/jenkins-k8s-%E5%8F%91%E5%B8%83%E8%84%9A%E6%9C%AC/","excerpt":"","text":"Jenkins-Systemd-发布脚本发布脚本1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586def createVersion() &#123; return new Date().format(&#x27;yyyyMMddHHmmss&#x27;)&#125;def _version = createVersion()def service = &#x27;hx-python-tianqi&#x27;def git_url = &#x27;http://192.168.8.1/hx-python.git&#x27;def credentialsId = &#x27;0a5e96ae-0443-4e1f-ac0a-e02b3b0e4d81&#x27;def docker_repo = &#x27;10.9.127.243:30002/dev&#x27;def namespaces = &#x27;dev&#x27;pipeline &#123; agent any stages &#123; stage(&#x27;拉取代码&#x27;) &#123; when &#123; environment name: &#x27;action&#x27;, value: &#x27;update&#x27; &#125; steps &#123; checkout([$class: &#x27;GitSCM&#x27;, branches: [[name: branch]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: credentialsId, url: git_url]]]) &#125; &#125; stage(&#x27;构建镜像&#x27;)&#123; when &#123; environment name: &#x27;action&#x27;, value: &#x27;update&#x27; &#125; steps &#123; sh &#x27;&#x27;&#x27; cat &lt;&lt; &#x27;EOF&#x27; &gt; dockerfileFROM jfloff/alpine-pythonMAINTAINER hxkjRUN cp -a /usr/share/zoneinfo/Asia/Shanghai /etc/localtimeCOPY tianqi.py /opt/app.pyRUN pip install requests pymysql beautifulsoup4 -i https://pypi.tuna.tsinghua.edu.cn/simpleWORKDIR /optENTRYPOINT [&quot;python&quot;,&quot;app.py&quot;]EOF&#x27;&#x27;&#x27; sh &quot;docker build -t $&#123;docker_repo&#125;/$&#123;service&#125;:$&#123;_version&#125; .&quot; &#125; &#125; stage(&#x27;推送镜像&#x27;)&#123; when &#123; environment name: &#x27;action&#x27;, value: &#x27;update&#x27; &#125; steps &#123; sh &quot;docker push $&#123;docker_repo&#125;/$&#123;service&#125;:$&#123;_version&#125; &quot; sh &quot;docker rmi $&#123;docker_repo&#125;/$&#123;service&#125;:$&#123;_version&#125; &quot; &#125; &#125; stage(&#x27;升级发布&#x27;)&#123; when &#123; environment name: &#x27;action&#x27;, value: &#x27;update&#x27; &#125; steps &#123; sh &quot;&quot;&quot; cat &lt;&lt; EOF &gt; $&#123;service&#125;.yamlapiVersion: batch/v1beta1kind: CronJobmetadata: name: $&#123;service&#125; namespace: $&#123;namespaces&#125;spec: schedule: &quot;*/15 * * * *&quot; jobTemplate: spec: template: spec: nodeSelector: containers: - name: $&#123;namespaces&#125; image: $&#123;docker_repo&#125;/$&#123;service&#125;:$&#123;_version&#125; imagePullPolicy: IfNotPresent restartPolicy: OnFailureEOF&quot;&quot;&quot; sh &quot;kubectl apply -f $&#123;service&#125;.yaml&quot; &#125; &#125; stage(&#x27;紧急回滚&#x27;)&#123; when &#123; environment name: &#x27;action&#x27;, value: &#x27;rollback&#x27; &#125; steps &#123; sh &quot;kubectl rollout undo deployment/$&#123;service&#125; -n $&#123;namespaces&#125;&quot; &#125; &#125; &#125;&#125;","categories":[{"name":"devops","slug":"devops","permalink":"https://biglovewheat.gihub.io/categories/devops/"}],"tags":[{"name":"devops","slug":"devops","permalink":"https://biglovewheat.gihub.io/tags/devops/"},{"name":"jenkins","slug":"jenkins","permalink":"https://biglovewheat.gihub.io/tags/jenkins/"},{"name":"k8s","slug":"k8s","permalink":"https://biglovewheat.gihub.io/tags/k8s/"}]},{"title":"GitLab备份恢复","slug":"gitlab-备份恢复","date":"2022-07-26T08:12:28.135Z","updated":"2022-07-26T07:37:42.000Z","comments":true,"path":"2022/07/26/gitlab-备份恢复/","link":"","permalink":"https://biglovewheat.gihub.io/2022/07/26/gitlab-%E5%A4%87%E4%BB%BD%E6%81%A2%E5%A4%8D/","excerpt":"","text":"GitLab备份恢复备份脚本12345678910111213141516171819#!/bin/bashcd /gitlab_jenkins_bakcup/gitlab/DATETIME=$(date +&quot;%Y%m%d%H%M&quot;)FILE1=&quot;gitlab_data_&quot;$&#123;DATETIME&#125;.tarFILE2=&quot;gitlab_config_&quot;$&#123;DATETIME&#125;.tarrm -f /gitlab_jenkins_bakcup/gitlab/*.targitlab-backup creategitlab-ctl backup-etcmv /var/opt/gitlab/backups/*_gitlab_backup.tar $FILE1mv /etc/gitlab/config_backup/gitlab_config*.tar $FILE2/usr/local/bin/aws s3 cp $FILE1 s3://hxs3/backup//usr/local/bin/aws s3 cp $FILE2 s3://hxs3/backup/ 恢复查看版本，备份恢复gitlab版本需一致 http://192.168.8.1:8090/help 13.10.3 安装指定版本 1234567891011cat &lt;&lt; EOF &gt; /etc/yum.repos.d/gitlab-ce.repo[gitlab-ce]name=gitlab-cebaseurl=http://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7repo_gpgcheck=0gpgcheck=0enabled=1EOFyum list gitlab-ce --showduplicatesyum install -y gitlab-ce-13.10.3-ce.0.el7 将配置文件拷贝到 &#x2F;etc&#x2F;gitlab&#x2F; 将备份文件拷贝到 &#x2F;var&#x2F;opt&#x2F;gitlab&#x2F;backups&#x2F; 恢复准备 12345gitlab-ctl reconfiguregitlab-ctl stop unicorngitlab-ctl stop pumagitlab-ctl stop sidekiqgitlab-ctl status 恢复，文件名不包含_gitlab_backup.tar 123mv gitlab_data_202201190445.tar 1633686919_2021_10_08_13.10.3_gitlab_backup.tarmv 1633686919_2021_10_08_13.10.3_gitlab_backup.tar /var/opt/gitlab/backups/gitlab-backup restore BACKUP=1633686919_2021_10_08_13.10.3 重新配置并启动 12gitlab-ctl reconfiguregitlab-ctl restart","categories":[{"name":"devops","slug":"devops","permalink":"https://biglovewheat.gihub.io/categories/devops/"}],"tags":[{"name":"devops","slug":"devops","permalink":"https://biglovewheat.gihub.io/tags/devops/"},{"name":"gitlab","slug":"gitlab","permalink":"https://biglovewheat.gihub.io/tags/gitlab/"}]},{"title":"Frp内网穿透反向代理安装配置","slug":"frp-内网穿透反向代理","date":"2022-07-26T08:12:27.704Z","updated":"2022-07-26T08:10:54.000Z","comments":true,"path":"2022/07/26/frp-内网穿透反向代理/","link":"","permalink":"https://biglovewheat.gihub.io/2022/07/26/frp-%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/","excerpt":"","text":"Frp内网穿透反向代理安装配置frp 是一个专注于内网穿透的高性能的反向代理应用，支持 TCP、UDP、HTTP、HTTPS 等多种协议。可以将内网服务以安全、便捷的方式通过具有公网 IP 节点的中转暴露到公网。 测试环境12345公网服务器（server端）：IP：68.79.111.111，centos7内网服务器（client端）：IP：192.168.8.211，centos7frp v0.43.0 下载网址，按需下载对应操作系统版本https://github.com/fatedier/frp/releasesserver端设置 server端配置123456789vi frps.ini[common]bind_port = 7111## 启动./frps -c frps.ini## 或后台启动：nohup /data/frp/frps -c /data/frp/frps.ini &gt;&gt;/data/frp/frps.log 2&gt;&amp;1 &amp; client端设置1234567891011121314151617## 配置端口映射，这里server端7112映射到client端22端口，其他端口同理。vi frpc.ini[common]server_addr = 68.79.111.111server_port = 7111## ssh 这个标签不能重复，建议用服务+端口命名[ssh_7112]type = tcplocal_ip = 68.79.111.111local_port = 22remote_port = 7112## 启动：./frpc -c frpc.ini## 或后台启动：nohup /data/frp/frpc -c /data/frp/frpc.ini &gt;&gt;/data/frp/frpc.log 2&gt;&amp;1 &amp; ##登录测试 访问server端外网IP+7112端口，等于访问clinet端22端口，达到内网穿透的效果。","categories":[{"name":"network","slug":"network","permalink":"https://biglovewheat.gihub.io/categories/network/"}],"tags":[{"name":"frp","slug":"frp","permalink":"https://biglovewheat.gihub.io/tags/frp/"},{"name":"network","slug":"network","permalink":"https://biglovewheat.gihub.io/tags/network/"}]}],"categories":[{"name":"shell","slug":"shell","permalink":"https://biglovewheat.gihub.io/categories/shell/"},{"name":"oracle","slug":"oracle","permalink":"https://biglovewheat.gihub.io/categories/oracle/"},{"name":"mysql","slug":"mysql","permalink":"https://biglovewheat.gihub.io/categories/mysql/"},{"name":"linux","slug":"linux","permalink":"https://biglovewheat.gihub.io/categories/linux/"},{"name":"监控","slug":"监控","permalink":"https://biglovewheat.gihub.io/categories/%E7%9B%91%E6%8E%A7/"},{"name":"AWS","slug":"AWS","permalink":"https://biglovewheat.gihub.io/categories/AWS/"},{"name":"middleware","slug":"middleware","permalink":"https://biglovewheat.gihub.io/categories/middleware/"},{"name":"devops","slug":"devops","permalink":"https://biglovewheat.gihub.io/categories/devops/"},{"name":"network","slug":"network","permalink":"https://biglovewheat.gihub.io/categories/network/"}],"tags":[{"name":"shell","slug":"shell","permalink":"https://biglovewheat.gihub.io/tags/shell/"},{"name":"oracle","slug":"oracle","permalink":"https://biglovewheat.gihub.io/tags/oracle/"},{"name":"mysql","slug":"mysql","permalink":"https://biglovewheat.gihub.io/tags/mysql/"},{"name":"linux","slug":"linux","permalink":"https://biglovewheat.gihub.io/tags/linux/"},{"name":"backup","slug":"backup","permalink":"https://biglovewheat.gihub.io/tags/backup/"},{"name":"监控","slug":"监控","permalink":"https://biglovewheat.gihub.io/tags/%E7%9B%91%E6%8E%A7/"},{"name":"Python","slug":"Python","permalink":"https://biglovewheat.gihub.io/tags/Python/"},{"name":"prometheus","slug":"prometheus","permalink":"https://biglovewheat.gihub.io/tags/prometheus/"},{"name":"FS","slug":"FS","permalink":"https://biglovewheat.gihub.io/tags/FS/"},{"name":"AWS","slug":"AWS","permalink":"https://biglovewheat.gihub.io/tags/AWS/"},{"name":"middleware","slug":"middleware","permalink":"https://biglovewheat.gihub.io/tags/middleware/"},{"name":"mq","slug":"mq","permalink":"https://biglovewheat.gihub.io/tags/mq/"},{"name":"python","slug":"python","permalink":"https://biglovewheat.gihub.io/tags/python/"},{"name":"nacos","slug":"nacos","permalink":"https://biglovewheat.gihub.io/tags/nacos/"},{"name":"devops","slug":"devops","permalink":"https://biglovewheat.gihub.io/tags/devops/"},{"name":"jenkins","slug":"jenkins","permalink":"https://biglovewheat.gihub.io/tags/jenkins/"},{"name":"k8s","slug":"k8s","permalink":"https://biglovewheat.gihub.io/tags/k8s/"},{"name":"gitlab","slug":"gitlab","permalink":"https://biglovewheat.gihub.io/tags/gitlab/"},{"name":"frp","slug":"frp","permalink":"https://biglovewheat.gihub.io/tags/frp/"},{"name":"network","slug":"network","permalink":"https://biglovewheat.gihub.io/tags/network/"}]}