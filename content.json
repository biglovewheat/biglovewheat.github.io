{"meta":{"title":"biglovewheat","subtitle":"","description":"","author":"biglovewheat","url":"https://biglovewheat.gihub.io","root":"/"},"pages":[{"title":"分类","date":"2022-07-25T08:47:31.000Z","updated":"2022-07-26T03:10:57.675Z","comments":true,"path":"categories/index.html","permalink":"https://biglovewheat.gihub.io/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2022-07-25T08:39:39.000Z","updated":"2022-07-26T03:08:43.741Z","comments":true,"path":"tags/index.html","permalink":"https://biglovewheat.gihub.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Ansible-修改hosts","slug":"ansible-修改hosts","date":"2022-09-07T16:00:00.000Z","updated":"2022-09-08T12:24:30.951Z","comments":true,"path":"2022/09/08/ansible-修改hosts/","link":"","permalink":"https://biglovewheat.gihub.io/2022/09/08/ansible-%E4%BF%AE%E6%94%B9hosts/","excerpt":"","text":"Ansible-修改hostsansible命令1234ansible all -i all.lst -m script -a &quot;script_hosts.sh&quot; -u ops_root -k## -i 指定清单文件## -m 模块 设置&#x2F;etc&#x2F;hosts命令1234567891011#!/bin/bashsudo /bin/bash -c &quot;cat &gt; /etc/hosts &quot; &lt;&lt;EOF127.0.0.1 localhost localhost.localdomain localhost4 localhost4.localdomain4::1 localhost localhost.localdomain localhost6 localhost6.localdomain6## prod172.31.62.90 aws-prod-app-01172.31.51.65 aws-prod-app-02172.31.58.171 aws-prod-app-03EOF","categories":[{"name":"devops","slug":"devops","permalink":"https://biglovewheat.gihub.io/categories/devops/"}],"tags":[{"name":"ansible","slug":"ansible","permalink":"https://biglovewheat.gihub.io/tags/ansible/"}]},{"title":"Oracle-undo","slug":"oracle-undo","date":"2022-09-06T16:00:00.000Z","updated":"2022-09-08T12:24:30.957Z","comments":true,"path":"2022/09/07/oracle-undo/","link":"","permalink":"https://biglovewheat.gihub.io/2022/09/07/oracle-undo/","excerpt":"","text":"Oracle-undo查看磁盘空间undo表空间使用率12345678910111213141516selecte.tablespace_name,max(total) total,sum(decode(e.status,&#x27;ACTIVE&#x27;,G,0)) active,sum(decode(e.status,&#x27;UNEXPIRED&#x27;,G,0)) unexpired,sum(decode(e.status,&#x27;EXPIRED&#x27;,G,0)) expired,round((sum(decode(e.status,&#x27;ACTIVE&#x27;,G,0))+sum(decode(e.status,&#x27;UNEXPIRED&#x27;,G,0)))/max(total)*100,2) real_use_pctfrom(select tablespace_name,round(sum(bytes)/1024/1024/1024,2) totalfrom dba_data_filesgroup by tablespace_name) f,(SELECT tablespace_name,status,round(SUM(bytes)/1024/1024/1024,2) Gfrom dba_undo_extentsgroup by tablespace_name,status) ewhere f.tablespace_name=e.tablespace_namegroup by e.tablespace_name; undo_retention 参数修改123456789101112SQL&gt; show parameter undoNAME TYPE VALUE------------------------------------ ----------- ------------------------------_in_memory_undo boolean FALSEundo_management string AUTOundo_retention integer 14400undo_tablespace string PSAPUNDOSQL&gt; alter system set undo_retention=10800 scope=both;System altered. undo占用语句查询12345select distinct s.machine,s.program,s.sid,round(t.used_ublk*8/1024/1024,2) undo_GB,used_urec undo_records,s.status,l.sql_textfrom v$transaction t,gv$session s,v$sqlstats lwhere t.ses_addr=s.saddrand s.sql_id=l.sql_id(+)order by undo_GB desc ; undo表空间扩容12345678910111213sqlplus -S / as sysdba &gt;undo.log &lt;&lt;EOFalter tablespace PSAPUNDO add datafile &#x27;/oradata6/EP1/sapdata13/undo.data27&#x27; size 30G ;alter tablespace PSAPUNDO add datafile &#x27;/oradata6/EP1/sapdata13/undo.data28&#x27; size 30G ;alter tablespace PSAPUNDO add datafile &#x27;/oradata6/EP1/sapdata13/undo.data29&#x27; size 30G ;alter tablespace PSAPUNDO add datafile &#x27;/oradata6/EP1/sapdata13/undo.data30&#x27; size 30G ;alter tablespace PSAPUNDO add datafile &#x27;/oradata6/EP1/sapdata13/undo.data31&#x27; size 30G ;alter tablespace PSAPUNDO add datafile &#x27;/oradata6/EP1/sapdata13/undo.data32&#x27; size 30G ;alter tablespace PSAPUNDO add datafile &#x27;/oradata6/EP1/sapdata13/undo.data33&#x27; size 30G ;alter tablespace PSAPUNDO add datafile &#x27;/oradata6/EP1/sapdata13/undo.data34&#x27; size 30G ;exitEOF undo隐藏参数调整12345678910111213141516SQL&gt; select a.ksppinm name,b.ksppstvl value,a.ksppdesc descriptionfrom x$ksppi a,x$ksppcv bwhere a.indx = b.indxand a.ksppinm like &#x27;%_undo_autotune%&#x27;;NAME--------------------------------------------------------------------------------VALUE----------------------------------------------------------------------------------------------------DESCRIPTION----------------------------------------------------------------------------------------------------_undo_autotuneTRUEenable auto tuning of undo_retentionSQL&gt; alter system set &quot;_undo_autotune&quot; = false; 创建undo表空间1create undo tablespace UNDOTBS1 datafile &#x27;/opt/oracle/oradata/CMCCWAP/undotbs01.dbf&#x27; size 200m autoextend on; undo相关视图12select * from v$undostat;select * from dba_hist_undostat;","categories":[{"name":"数据库","slug":"数据库","permalink":"https://biglovewheat.gihub.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"}],"tags":[{"name":"oracle","slug":"oracle","permalink":"https://biglovewheat.gihub.io/tags/oracle/"}]},{"title":"Docker-Dockerfile","slug":"docker-dockerfile","date":"2022-09-05T16:00:00.000Z","updated":"2022-09-08T12:24:30.952Z","comments":true,"path":"2022/09/06/docker-dockerfile/","link":"","permalink":"https://biglovewheat.gihub.io/2022/09/06/docker-dockerfile/","excerpt":"","text":"Docker-Dockerfilenginx12345From nginx:1.20-alpineRUN cp -a /usr/share/zoneinfo/Asia/Shanghai /etc/localtimeCOPY ./dist /distCOPY ./nginx.conf /etc/nginx/nginx.confCMD [&quot;nginx&quot;,&quot;-g&quot;,&quot;daemon off;&quot;]","categories":[{"name":"devops","slug":"devops","permalink":"https://biglovewheat.gihub.io/categories/devops/"}],"tags":[{"name":"docker","slug":"docker","permalink":"https://biglovewheat.gihub.io/tags/docker/"}]},{"title":"Oracle-sqluldr2-导出数据","slug":"oracle-sqluldr2-导出数据","date":"2022-09-05T16:00:00.000Z","updated":"2022-09-08T12:24:30.957Z","comments":true,"path":"2022/09/06/oracle-sqluldr2-导出数据/","link":"","permalink":"https://biglovewheat.gihub.io/2022/09/06/oracle-sqluldr2-%E5%AF%BC%E5%87%BA%E6%95%B0%E6%8D%AE/","excerpt":"","text":"Oracle-sqluldr2-导出数据命令行执行123456## user=oradds/oradds --登录用户名、密码## sql=ts.sql --提数sql## file=ts.csv --输出文件## head=yes --是否保留表头## log=ts.log --日志sqluldr2.bin user=oradds/oradds sql=ts.sql file=ts.csv head=yes log=ts.log array=500 每100w行分割成一个文件（batch&#x3D;yes，row&#x3D;1000000，file加上变量%b）1sqluldr2.bin user=oradds/oradds sql=ts.sql file=ts_%b.csv head=yes log=ts.log array=500 batch=yes row=1000000 以竖线（“|”）为分隔符1sqluldr2.bin user=oradds/oradds sql=ts.sql file=ts.csv head=yes log=ts.log array=500 field=0x7c","categories":[{"name":"数据库","slug":"数据库","permalink":"https://biglovewheat.gihub.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"}],"tags":[{"name":"oracle","slug":"oracle","permalink":"https://biglovewheat.gihub.io/tags/oracle/"}]},{"title":"Oracle-表空间扩容","slug":"oracle-表空间扩容","date":"2022-09-05T16:00:00.000Z","updated":"2022-09-08T12:24:30.957Z","comments":true,"path":"2022/09/06/oracle-表空间扩容/","link":"","permalink":"https://biglovewheat.gihub.io/2022/09/06/oracle-%E8%A1%A8%E7%A9%BA%E9%97%B4%E6%89%A9%E5%AE%B9/","excerpt":"","text":"Oracle-表空间扩容查看磁盘空间查看表空间使用率123456789101112131415161718192021222324252627282930313233343536373839Select ts.tablespace_name, ts.status, ts.contents, ts.extent_management, ts.bigfile, size_info.megs_alloc, size_info.megs_free, size_info.megs_used, size_info.pct_free, size_info.pct_used, size_info.max From ( select a.tablespace_name, round(a.bytes_alloc / 1024 / 1024) megs_alloc, round(nvl(b.bytes_free, 0) / 1024 / 1024) megs_free, round((a.bytes_alloc - nvl(b.bytes_free, 0)) / 1024 / 1024) megs_used, round((nvl(b.bytes_free, 0) / a.bytes_alloc) * 100) Pct_Free, 100 - round((nvl(b.bytes_free, 0) / a.bytes_alloc) * 100) Pct_used, round(maxbytes/1048576) Max from ( select f.tablespace_name, sum(f.bytes) bytes_alloc, sum(decode(f.autoextensible, &#x27;YES&#x27;,f.maxbytes,&#x27;NO&#x27;, f.bytes)) maxbytes from dba_data_files f group by tablespace_name) a, ( select f.tablespace_name, sum(f.bytes) bytes_free from dba_free_space f group by tablespace_name) b where a.tablespace_name = b.tablespace_name (+) union all select h.tablespace_name, round(sum(h.bytes_free + h.bytes_used) / 1048576) megs_alloc, round(sum((h.bytes_free + h.bytes_used) - nvl(p.bytes_used, 0)) / 1048576) megs_free, round(sum(nvl(p.bytes_used, 0))/ 1048576) megs_used, round((sum((h.bytes_free + h.bytes_used) - nvl(p.bytes_used, 0)) / sum(h.bytes_used + h.bytes_free)) * 100) Pct_Free, 100 - round((sum((h.bytes_free + h.bytes_used) - nvl(p.bytes_used, 0)) / sum(h.bytes_used + h.bytes_free)) * 100) pct_used, round(sum(decode(f.autoextensible, &#x27;YES&#x27;, f.maxbytes, &#x27;NO&#x27;, f.bytes) / 1048576)) max from sys.v_$TEMP_SPACE_HEADER h, sys.v_$Temp_extent_pool p, dba_temp_files f where p.file_id(+) = h.file_id and p.tablespace_name(+) = h.tablespace_name and f.file_id = h.file_id and f.tablespace_name = h.tablespace_name group by h.tablespace_name ) size_info, sys.dba_tablespaces ts where ts.tablespace_name = size_info.tablespace_name; 表空间扩容12--数据文件一般按序号添加，所以首先要找到最大一个数据文件的编号，再按顺序增加alter tablespace PSAPSR3 add datafile &#x27;/dataQF/qfdata/oradata/qfdata3/PSAPSR780.DBF&#x27; size 30G;","categories":[{"name":"数据库","slug":"数据库","permalink":"https://biglovewheat.gihub.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"}],"tags":[{"name":"oracle","slug":"oracle","permalink":"https://biglovewheat.gihub.io/tags/oracle/"}]},{"title":"Postgresql-dblink使用","slug":"postgresql-导入导出 copy","date":"2022-09-05T16:00:00.000Z","updated":"2022-09-08T12:24:30.957Z","comments":true,"path":"2022/09/06/postgresql-导入导出 copy/","link":"","permalink":"https://biglovewheat.gihub.io/2022/09/06/postgresql-%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA%20copy/","excerpt":"","text":"Postgresql-dblink使用123456789101112131415161718-- 开启dblinkcreate EXTENSION dblink if not EXISTS;-- 新建dblinkselect dblink_connect(&#x27;dblinktest&#x27;,&#x27;host=192.168.8.201 dbname=hxtest user=postgres password=654321&#x27;); -- 查询现有dblinkselect dblink_get_connections();-- 通过dblink查询表select * from dblink(&#x27;dblinktest&#x27;,&#x27;select gid,code from d_farmland;&#x27;)as t_d_farmland(gid int,d_farmland varchar(20));-- 断开dblinkselect dblink_disconnect(&#x27;dblinktest&#x27;);-- 断开所有select dblink_disconnect();","categories":[{"name":"数据库","slug":"数据库","permalink":"https://biglovewheat.gihub.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"}],"tags":[{"name":"postgresql","slug":"postgresql","permalink":"https://biglovewheat.gihub.io/tags/postgresql/"}]},{"title":"Python-Nacos-备份","slug":"python-nacos-备份","date":"2022-09-01T16:00:00.000Z","updated":"2022-09-08T12:24:30.958Z","comments":true,"path":"2022/09/02/python-nacos-备份/","link":"","permalink":"https://biglovewheat.gihub.io/2022/09/02/python-nacos-%E5%A4%87%E4%BB%BD/","excerpt":"","text":"Python-Nacos-备份一个python写的nacos配置备份，并上传到s3的脚本 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748#!/usr/bin/python3 from fileinput import filenameimport requestsimport jsonimport datetimeimport osfrom boto3.session import Session## s3 configaws_key = &quot;XXXX&quot;aws_secret = &quot;XXXX&quot;region_name = &quot;cn-northwest-1&quot;session = Session(aws_access_key_id=aws_key,aws_secret_access_key=aws_secret,region_name=region_name)s3 = session.resource(&quot;s3&quot;)client = session.client(&quot;s3&quot;)bucket = &quot;hxs3&quot;## nacosnacos_list=[ &#x27;http://10.9.127.244:8848|c23a1b4c-e97f-45ae-a5c0-1e7f1a8d22e9|nacos|nacos|nacos-dev&#x27;, &#x27;http://10.9.127.245:8848|da7aaaa2-7505-4c1d-98c6-9e2e7778ef55|nacos|nacos|nacos-prod&#x27;]for row in nacos_list: url,namespace,username,password,filename = row.strip().split(&#x27;|&#x27;) login_url = url+&#x27;/nacos/v1/auth/users/login&#x27; data = &#123;&#x27;username&#x27;:username, &#x27;password&#x27;:password&#125; s = requests.session() resp = s.post(login_url,data) token = json.loads(resp.text)[&#x27;accessToken&#x27;] backup_url = url+&#x27;/nacos/v1/cs/configs?export=true&amp;tenant=&#x27;+namespace+&#x27;&amp;group=&amp;appName=&amp;dataId=&amp;ids=&amp;accessToken=&#x27;+token filename = os.path.abspath(os.path.dirname(__file__))+&#x27;/&#x27;+filename+&#x27;-&#x27;+datetime.datetime.now().strftime(&#x27;%Y%m%d&#x27;)+&#x27;.zip&#x27; r = requests.get(backup_url) with open(filename, &quot;wb&quot;) as code: code.write(r.content) upload_data = open(filename,&quot;rb&quot;) upload_key = &quot;backup/&quot;+os.path.basename(filename) file_obj = s3.Bucket(bucket).put_object(Key=upload_key, Body=upload_data) print(file_obj)","categories":[{"name":"python","slug":"python","permalink":"https://biglovewheat.gihub.io/categories/python/"}],"tags":[{"name":"python","slug":"python","permalink":"https://biglovewheat.gihub.io/tags/python/"},{"name":"nacos","slug":"nacos","permalink":"https://biglovewheat.gihub.io/tags/nacos/"}]},{"title":"Java程序占用cpu高排查","slug":"java程序占用cpu高排查","date":"2022-08-31T16:00:00.000Z","updated":"2022-09-08T12:24:30.954Z","comments":true,"path":"2022/09/01/java程序占用cpu高排查/","link":"","permalink":"https://biglovewheat.gihub.io/2022/09/01/java%E7%A8%8B%E5%BA%8F%E5%8D%A0%E7%94%A8cpu%E9%AB%98%E6%8E%92%E6%9F%A5/","excerpt":"","text":"Java程序占用cpu高排查1234567891011## top + 大写C 用cpu占用率排序，记录进程top## top -Hp ，记录该进程中的线程号top -Hp 26750## 找到占用最高的线程，将pid换算成16进制printf &#x27;%x\\n&#x27; 26751## 通过jstack找到线程信息jstack 26750 |grep xxxxx","categories":[{"name":"故障排查","slug":"故障排查","permalink":"https://biglovewheat.gihub.io/categories/%E6%95%85%E9%9A%9C%E6%8E%92%E6%9F%A5/"}],"tags":[{"name":"java","slug":"java","permalink":"https://biglovewheat.gihub.io/tags/java/"}]},{"title":"K8s-crontabjob","slug":"k8s-crontabjob","date":"2022-08-29T16:00:00.000Z","updated":"2022-09-08T12:24:30.955Z","comments":true,"path":"2022/08/30/k8s-crontabjob/","link":"","permalink":"https://biglovewheat.gihub.io/2022/08/30/k8s-crontabjob/","excerpt":"","text":"K8s-crontabjob123456789101112131415161718## Cronjob的时区和kube-controller-manager服务的时区一致,默认为0时区,需-8小时## 或修改kube-controller-manager时区apiVersion: batch/v1beta1kind: CronJobmetadata: name: hx-python-jiage namespace: devspec: schedule: &quot;2 16 * * *&quot; jobTemplate: spec: template: spec: containers: - name: hx-python-jiage image: 10.9.127.243:30002/library/hx-python-jiage:1.0 imagePullPolicy: IfNotPresent restartPolicy: OnFailure","categories":[{"name":"devops","slug":"devops","permalink":"https://biglovewheat.gihub.io/categories/devops/"}],"tags":[{"name":"devops","slug":"devops","permalink":"https://biglovewheat.gihub.io/tags/devops/"},{"name":"k8s","slug":"k8s","permalink":"https://biglovewheat.gihub.io/tags/k8s/"}]},{"title":"K8s-组件安装","slug":"k8s-组件安装","date":"2022-08-29T16:00:00.000Z","updated":"2022-09-08T12:24:30.955Z","comments":true,"path":"2022/08/30/k8s-组件安装/","link":"","permalink":"https://biglovewheat.gihub.io/2022/08/30/k8s-%E7%BB%84%E4%BB%B6%E5%AE%89%E8%A3%85/","excerpt":"","text":"K8s-组件安装12345678## metricskubectl apply -f https://download.osichina.net/tools/kubernetes/metrics-server/components.yaml## deshboardkubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.3.1/aio/deploy/recommended.yaml## calicokubectl apply -f https://docs.projectcalico.org/v3.19/manifests/calico.yaml","categories":[{"name":"devops","slug":"devops","permalink":"https://biglovewheat.gihub.io/categories/devops/"}],"tags":[{"name":"devops","slug":"devops","permalink":"https://biglovewheat.gihub.io/tags/devops/"},{"name":"k8s","slug":"k8s","permalink":"https://biglovewheat.gihub.io/tags/k8s/"}]},{"title":"Lvs+keepalived安装配置","slug":"lvs-keepalive安装","date":"2022-08-29T16:00:00.000Z","updated":"2022-09-08T12:24:30.956Z","comments":true,"path":"2022/08/30/lvs-keepalive安装/","link":"","permalink":"https://biglovewheat.gihub.io/2022/08/30/lvs-keepalive%E5%AE%89%E8%A3%85/","excerpt":"","text":"Lvs+keepalived安装配置实验 主机 软件 IP vip 192.168.8.209 lvs1 lvs+keepalived 192.168.8.201 lvs2 lvs+keepalived 192.168.8.202 nginx1 nginx 192.168.8.203 nginx2 nginx 192.168.8.204 lvs和keepalived安装12345678910111213141516## 安装lvs管理工具ipvsadmyum install -y gcc openssl openssl-devel ipvsadm## keepalived 编译安装./configure --prefix=/usr/local/keepalivedmake &amp;&amp; make install## keepalived 注册服务 &amp; 开机启动cp /soft/keepalived-2.0.20/keepalived/etc/init.d/keepalived /etc/init.d/cp /usr/local/keepalived/etc/sysconfig/keepalived /etc/sysconfig/mkdir -p /etc/keepalived/cp /usr/local/keepalived/etc/keepalived/keepalived.conf /etc/keepalived/cp /usr/local/keepalived/sbin/keepalived /usr/sbinsystemctl enable keepalivedsystemctl restart keepalived lvs1(主机)配置12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152cat /etc/keepalived/keepalived.conf! Configuration File for keepalivedglobal_defs &#123; notification_email &#123; #xxxx@itcast.com # 发生故障时发送的邮箱 &#125; #notification_email_from xxxx@itcast.com # 使用哪个邮箱发送 #smtp_server xxx.com # 发件服务器 smtp_connect_timeout 30 router_id LVS_DEVEL&#125;vrrp_instance VI_1 &#123; state MASTER # 标示为主lvs interface ens33 # HA检测端口 virtual_router_id 66 # 主备的virtual_router_id 必须相同 priority 100 # 优先级,备lvs要比主lvs稍小 advert_int 1 # VRRP Multicast 广播周期秒数 authentication &#123; # 定义认证 auth_type PASS # 认证方式为口令认证 auth_pass 6666 # 定义口令 &#125; virtual_ipaddress &#123; # 定义vip 192.168.3.209 # 多个vip可换行添加 &#125;&#125;virtual_server 192.168.3.209 80 &#123; delay_loop 6 # 每隔6秒查看realserver状态 lb_algo wlc # 调度算法为加权最小连接数 lb_kind DR # lvs工作模式为DR(直接路由)模式 nat_mask 255.255.255.0 persistence_timeout 50 # 同一IP 的连接50秒内被分配到同一台realserver(测试时建议改为0) protocol TCP # 用TCP监测realserver的状态 real_server 192.168.3.203 80 &#123; # 定义realserver weight 3 # 定义权重 TCP_CHECK &#123; # 注意TCP_CHECK和&#123;之间的空格,如果没有的话只会添加第一个realserver connect_timeout 3 # 三秒无响应超时 nb_get_retry 3 delay_before_retry 3 connect_port 80 &#125; &#125; real_server 192.168.3.204 80 &#123; weight 3 TCP_CHECK &#123; connect_timeout 3 nb_get_retry 3 delay_before_retry 3 connect_port 80 &#125; &#125;&#125; lvs2(备机)配置配置和主机相同，唯一区别是priority的值要少于主机 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152cat /etc/keepalived/keepalived.conf! Configuration File for keepalivedglobal_defs &#123; notification_email &#123; #xxxx@itcast.com # 发生故障时发送的邮箱 &#125; #notification_email_from xxxx@itcast.com # 使用哪个邮箱发送 #smtp_server xxx.com # 发件服务器 smtp_connect_timeout 30 router_id LVS_DEVEL&#125;vrrp_instance VI_1 &#123; state BACKUP # 标示为主lvs interface ens33 # HA检测端口 virtual_router_id 66 # 主备的virtual_router_id 必须相同 priority 99 # 优先级,备lvs要比主lvs稍小 advert_int 1 # VRRP Multicast 广播周期秒数 authentication &#123; # 定义认证 auth_type PASS # 认证方式为口令认证 auth_pass 6666 # 定义口令 &#125; virtual_ipaddress &#123; # 定义vip 192.168.3.209 # 多个vip可换行添加 &#125;&#125;virtual_server 192.168.3.209 80 &#123; delay_loop 6 # 每隔6秒查看realserver状态 lb_algo wlc # 调度算法为加权最小连接数 lb_kind DR # lvs工作模式为DR(直接路由)模式 nat_mask 255.255.255.0 persistence_timeout 50 # 同一IP 的连接50秒内被分配到同一台realserver(测试时建议改为0) protocol TCP # 用TCP监测realserver的状态 real_server 192.168.3.203 80 &#123; # 定义realserver weight 3 # 定义权重 TCP_CHECK &#123; # 注意TCP_CHECK和&#123;之间的空格,如果没有的话只会添加第一个realserver connect_timeout 3 # 三秒无响应超时 nb_get_retry 3 delay_before_retry 3 connect_port 80 &#125; &#125; real_server 192.168.3.204 80 &#123; weight 3 TCP_CHECK &#123; connect_timeout 3 nb_get_retry 3 delay_before_retry 3 connect_port 80 &#125; &#125;&#125; lvs配置将lvs启动配置成服务，随开机启动（lvs1、lvs2都需配置） 1234567891011121314151617181920212223242526272829303132vi /etc/init.d/lvs_dr_rs#!/bin/sh#chkconfig:345 85 15#description:lvs_dr_rsVIP=192.168.3.209. /etc/rc.d/init.d/functionscase $1 in start) echo &quot;lo:0 port starting&quot; ifconfig lo:0 $VIP broadcast $VIP netmask 255.255.255.255 up echo &quot;1&quot; &gt; /proc/sys/net/ipv4/conf/lo/arp_ignore echo &quot;2&quot; &gt; /proc/sys/net/ipv4/conf/lo/arp_announce echo &quot;1&quot; &gt; /proc/sys/net/ipv4/conf/all/arp_ignore echo &quot;2&quot; &gt; /proc/sys/net/ipv4/conf/all/arp_announce ;; stop) echo &quot;lo:0 port closing&quot; ifconfig lo:0 down echo &quot;0&quot; &gt; /proc/sys/net/ipv4/conf/lo/arp_ignore echo &quot;0&quot; &gt; /proc/sys/net/ipv4/conf/lo/arp_announce echo &quot;0&quot; &gt; /proc/sys/net/ipv4/conf/all/arp_ignore echo &quot;0&quot; &gt; /proc/sys/net/ipv4/conf/all/arp_announce ;; *) echo &quot;Usage: $0 &#123;start ¦ stop&#125;&quot; exit 1esacchmod u+x /etc/init.d/lvs_dr_rssystemctl enable lvs_dr_rssystemctl start lvs_dr_rs","categories":[{"name":"linux","slug":"linux","permalink":"https://biglovewheat.gihub.io/categories/linux/"}],"tags":[{"name":"lvs","slug":"lvs","permalink":"https://biglovewheat.gihub.io/tags/lvs/"},{"name":"keepalived","slug":"keepalived","permalink":"https://biglovewheat.gihub.io/tags/keepalived/"}]},{"title":"ssl证书类型和价格","slug":"ssl证书类型和价格","date":"2022-08-29T16:00:00.000Z","updated":"2022-09-08T12:24:30.958Z","comments":true,"path":"2022/08/30/ssl证书类型和价格/","link":"","permalink":"https://biglovewheat.gihub.io/2022/08/30/ssl%E8%AF%81%E4%B9%A6%E7%B1%BB%E5%9E%8B%E5%92%8C%E4%BB%B7%E6%A0%BC/","excerpt":"","text":"ssl证书类型和价格ssl证书简介 ssl证书类型 ssl证书价格","categories":[{"name":"理论知识","slug":"理论知识","permalink":"https://biglovewheat.gihub.io/categories/%E7%90%86%E8%AE%BA%E7%9F%A5%E8%AF%86/"}],"tags":[{"name":"ssl","slug":"ssl","permalink":"https://biglovewheat.gihub.io/tags/ssl/"}]},{"title":"AWS-S3","slug":"aws-s3","date":"2022-08-28T16:00:00.000Z","updated":"2022-09-08T12:24:30.952Z","comments":true,"path":"2022/08/29/aws-s3/","link":"","permalink":"https://biglovewheat.gihub.io/2022/08/29/aws-s3/","excerpt":"","text":"AWS-S3中国区价格https://www.amazonaws.cn/s3/pricing/ 存储类别 client安装配置1234567891011121314151617## 安装curl &quot;https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip&quot; -o &quot;awscliv2.zip&quot;unzip awscliv2.zip./aws/installvi /etc/profileexport PATH=$PATH:/usr/local/bin## 帮助/usr/local/bin/aws s3 cp help## 配置/usr/local/bin/aws configureAWS Access Key ID [None]: AKIAUPGCAPWX4FXXXXXXAWS Secret Access Key [None]: SsOupysZ4ZBptxGCxPm+aLWq+dTfShrgsdXXXXXXDefault region name [None]: cn-northwest-1Default output format [None]: 上传下载12345/usr/local/bin/aws s3 cp mysqlbackup_all_202109280515.tar.gz s3://aas3## 复制和排除文件夹/usr/local/bin/aws s3 cp miniodata s3://aas3/permanent_backup/minio_backup/ --exclude sensordata/* --exclude .minio.sys/* --recursive/usr/local/bin/aws s3 cp s3://aas3/AWSLogs/307497041326/vpcflowlogs/cn-northwest-1/2021/11/19/ . --recursive 挂载S3为文件系统12345678910111213141516171819202122232425## 1.参考文档## https://aws.amazon.com/cn/blogs/china/s3fs-amazon-ec2-linux/## 2.安装elepyum install -y epel-release## 3.安装s3fs-fuseyum install s3fs-fuse -y## 4.配置登录信息 echo AKIAUPGCAPWX4FD5N2CO:SsOupysZ4ZBptxGCxPm+aLWq+dTfShrgsdITVib2 &gt; /etc/passwd-s3fschmod 600 /etc/passwd-s3fs## 5.手工挂载mkdir -p /s3mnts3fs hxs3 /s3mnt -o passwd_file=/etc/passwd-s3fs -o url=http://s3.cn-northwest-1.amazonaws.com.cn -o endpoint=cn-northwest-1## 6.自动挂载vi /etc/fstabs3fs#hxs3 /s3mnt fuse allow_other,url=http://s3.cn-northwest-1.amazonaws.com.cn,endpoint=cn-northwest-1 0 0mount -a## 7.卸载umount /s3mntumount -l /s3mnt","categories":[{"name":"云原生","slug":"云原生","permalink":"https://biglovewheat.gihub.io/categories/%E4%BA%91%E5%8E%9F%E7%94%9F/"}],"tags":[{"name":"aws","slug":"aws","permalink":"https://biglovewheat.gihub.io/tags/aws/"},{"name":"s3","slug":"s3","permalink":"https://biglovewheat.gihub.io/tags/s3/"}]},{"title":"AWS-阿里云对比","slug":"aws-阿里云对比","date":"2022-08-28T16:00:00.000Z","updated":"2022-09-08T12:24:30.952Z","comments":true,"path":"2022/08/29/aws-阿里云对比/","link":"","permalink":"https://biglovewheat.gihub.io/2022/08/29/aws-%E9%98%BF%E9%87%8C%E4%BA%91%E5%AF%B9%E6%AF%94/","excerpt":"","text":"AWS-阿里云对比AWS为中国区价格 云服务器 厂商 阿里云 阿里云 AWS AWS 型号 ecs.g7.xlarge ecs.r7.xlarge m5.xlarge r5.xlarge 类型 通用型 内存型 通用型 内存型 规格 4c16g 4c32g 4c16g 4c32g 小时价 1.0465 1.392442 2.026 2.437 小时-月 753.48 1002.55824 1458.72 1754.64 包月价 502.32 668.37 303.12 396 包年-月 426.97 568.12 282.96 369.36 块存储 厂商 阿里云 阿里云 AWS 型号 PL0 PL1 GP3 性能指标 10000IOPS&#x2F;180MB 50000IOPS&#x2F;350MB 3000IOPS&#x2F;125MB 计价方式 按量-小时&#x2F;GiB 按量-小时&#x2F;GiB 按量-小时&#x2F;GiB 单价 0.00105 0.0021 折算 0.756 1.512 0.5312 计价方式 包月-月&#x2F;GiB 包月-月&#x2F;GiB 单价 0.5 1 对象存储 厂商 阿里云 AWS 型号 oss标准型单价 S3标准存储 单价 0.12 0.1755 流量费用 0.25gb(闲时)&#x2F;0.5gb（忙时） 0.933&#x2F;gb 请求费用 PUT:0.01元&#x2F;万次 PUT:0.0405&#x2F;万次，GET:0.0135&#x2F;万次","categories":[{"name":"云原生","slug":"云原生","permalink":"https://biglovewheat.gihub.io/categories/%E4%BA%91%E5%8E%9F%E7%94%9F/"}],"tags":[{"name":"aws","slug":"aws","permalink":"https://biglovewheat.gihub.io/tags/aws/"},{"name":"阿里云","slug":"阿里云","permalink":"https://biglovewheat.gihub.io/tags/%E9%98%BF%E9%87%8C%E4%BA%91/"}]},{"title":"Nexus减肥","slug":"nexus-减肥","date":"2022-08-28T16:00:00.000Z","updated":"2022-09-08T12:24:30.957Z","comments":true,"path":"2022/08/29/nexus-减肥/","link":"","permalink":"https://biglovewheat.gihub.io/2022/08/29/nexus-%E5%87%8F%E8%82%A5/","excerpt":"","text":"Nexus减肥nexus默认安装时，没有开启清理的任务，时间一长，容易占用大量磁盘空间 清理maven-snapshot库system–task–create task–Maven - Delete SNAPSHOT Task 默认策略，只保留一个，多于1个且超过30天将删除 释放blob store空间清理完成后，不会马上释放空间，需要运行另外一个任务释放 system–task–create task–Create Admin - Compact blob store Task","categories":[{"name":"devops","slug":"devops","permalink":"https://biglovewheat.gihub.io/categories/devops/"}],"tags":[{"name":"nexus","slug":"nexus","permalink":"https://biglovewheat.gihub.io/tags/nexus/"}]},{"title":"正则表达式","slug":"正则表达式","date":"2022-08-23T16:00:00.000Z","updated":"2022-09-08T12:24:30.958Z","comments":true,"path":"2022/08/24/正则表达式/","link":"","permalink":"https://biglovewheat.gihub.io/2022/08/24/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/","excerpt":"","text":"正则表达式身份证校验1234567891011121314151617## 前六位，地区([1-6][1-9]|50)\\d&#123;4&#125;## 7-8位置，年份前两位，1800-2099(18|19|20)## 9-10位置，年份后两位\\d&#123;2&#125;## 11-12，月份((0[1-9])|10|11|12)## 13-14，日期(([0-2][1-9])|10|20|30|31) ## 15-17，顺序码\\d&#123;3&#125;## 校验码： [0-9Xx]## 校验18位的身份证^([1-6][1-9]|50)\\d&#123;4&#125;(18|19|20)\\d&#123;2&#125;((0[1-9])|10|11|12)(([0-2][1-9])|10|20|30|31)\\d&#123;3&#125;[0-9Xx]$ email校验1^[a-zA-Z0-9_-]+@[a-zA-Z0-9_-]+(\\.[a-zA-Z0-9_-]+)+$/; ip校验1(1-255).(0-255).(0-255).(0-255) python使用正则1234567891011import reidlist=[&#x27;440107199808180637&#x27;,&#x27;100107199808180637&#x27;]pat=r&#x27;^([1-6][1-9]|50)\\d&#123;4&#125;(18|19|20)\\d&#123;2&#125;((0[1-9])|10|11|12)(([0-2][1-9])|10|20|30|31)\\d&#123;3&#125;[0-9Xx]$&#x27;for id in idlist: if re.search(pat,id): print(&#x27;OK&#x27;) else: print(&#x27;NO&#x27;)","categories":[{"name":"基础概念","slug":"基础概念","permalink":"https://biglovewheat.gihub.io/categories/%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/"}],"tags":[{"name":"正则表达式","slug":"正则表达式","permalink":"https://biglovewheat.gihub.io/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"}]},{"title":"Redis-编译安装","slug":"redis-编译安装","date":"2022-08-22T16:00:00.000Z","updated":"2022-09-08T12:24:30.958Z","comments":true,"path":"2022/08/23/redis-编译安装/","link":"","permalink":"https://biglovewheat.gihub.io/2022/08/23/redis-%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85/","excerpt":"","text":"Redis-编译安装升级gcc版本12345yum -y install centos-release-sclyum -y install devtoolset-9-gcc devtoolset-9-gcc-c++ devtoolset-9-binutilsscl enable devtoolset-9 bashecho &quot;source /opt/rh/devtoolset-9/enable&quot; &gt;&gt; /etc/profilegcc -v 编译安装12make &amp;&amp; make PREFIX=/usr/local/redis installredis-cli --pass &#x27;123456&#x27; shutdown 系统配置1234567891011121314151617181920212223useradd -s /sbin/nologin redisecho 1024 &gt;/proc/sys/net/core/somaxconnsysctl vm.overcommit_memory=1echo never &gt; /sys/kernel/mm/transparent_hugepage/enabledif test -f /sys/kernel/mm/transparent_hugepage/enabled; thenecho never &gt; /sys/kernel/mm/transparent_hugepage/enabledfiif test -f /sys/kernel/mm/transparent_hugepage/defrag; thenecho never &gt; /sys/kernel/mm/transparent_hugepage/defragfi## 修改--session生效ulimit -n 65535## 修改--重启永久生效vi /etc/security/limits.conf* soft nofile 65535* hard nofile 65535* soft nproc 65535* hard nproc 65535 参数配置123456789101112131415## 放开其他服务器登录bind 0.0.0.0## 端口port 6379## 后台运行daemonize yes## 后台运行后pidfilepidfile /var/run/redis_6379.pid## 日志文件路径logfile &quot;/usr/local/redis/log/redis-6379.log&quot;## 数据文件路径dir /usr/local/redis/data-6379/## 复制相关replicaof 192.168.8.199 6379masterauth &#x27;123456&#x27; 复制相关12345## 查看复制info replication## slave 变 masterslaveof no one","categories":[{"name":"middleware","slug":"middleware","permalink":"https://biglovewheat.gihub.io/categories/middleware/"}],"tags":[{"name":"middleware","slug":"middleware","permalink":"https://biglovewheat.gihub.io/tags/middleware/"},{"name":"redis","slug":"redis","permalink":"https://biglovewheat.gihub.io/tags/redis/"}]},{"title":"K8s-helm-安装常用软件","slug":"k8s-helm-安装常用软件","date":"2022-08-17T16:00:00.000Z","updated":"2022-09-08T12:24:30.955Z","comments":true,"path":"2022/08/18/k8s-helm-安装常用软件/","link":"","permalink":"https://biglovewheat.gihub.io/2022/08/18/k8s-helm-%E5%AE%89%E8%A3%85%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6/","excerpt":"","text":"K8s-helm-安装常用软件helm安装1234wget https://get.helm.sh/helm-v3.9.3-linux-amd64.tar.gztar -xvf helm-v3.9.3-linux-amd64.tar.gzchmod u+x helmcp helm /usr/sbin 添加仓库123helm repo add bitnami https://charts.bitnami.com/bitnamihelm repo add c7n https://openchart.choerodon.com.cn/choerodon/c7nhelm repo add apphub https://apphub.aliyuncs.com/ helm-nfs-subdir-external-provisioner12345678910111213##https://github.com/kubernetes-sigs/nfs-subdir-external-provisionerhelm repo add nfs-subdir-external-provisioner https://kubernetes-sigs.github.io/nfs-subdir-external-provisioner/helm install nfs-subdir-external-provisioner nfs-subdir-external-provisioner/nfs-subdir-external-provisioner \\ --namespace=kube-system \\ --set image.repository=willdockerhub/nfs-subdir-external-provisioner \\ --set image.tag=v4.0.2 \\ --set replicaCount=2 \\ --set storageClass.name=sc-nfs \\ --set storageClass.defaultClass=true \\ --set nfs.server=192.168.8.201 \\ --set nfs.path=/nfsdata helm-jenkins123456helm repo add bitnami https://charts.bitnami.com/bitnamihelm upgrade --install jenkins bitnami/jenkins -n tools \\--set jenkinsUser=admin \\--set jenkinsPassword=&#x27;admin123&#x27; \\--set javaOpts=&#x27;-Duser.timezone=Asia/Shanghai&#x27; helm-mysql123456789101112### https://hub.kubeapps.com/charts/bitnami/mysqlhelm repo add bitnami https://charts.bitnami.com/bitnamihelm upgrade --install mysql bitnami/mysql -n tools \\--set global.storageClass=sc-nfs \\--set image.tag=8.0.23-debian-10-r84 \\--set auth.database=&quot;&quot; \\--set architecture=standalone \\--set auth.rootPassword=admin123 \\--set primary.service.type=NodePort \\--set primary.service.nodePort=30036 \\--set primary.persistence.size=100Gi helm-nexus12345678910111213141516171819202122232425262728293031helm upgrade --install sonatype-nexus apphub/sonatype-nexus -n middleware \\--set ingress.tls.enabled=false \\--set persistence.storageClass=sc-nfs \\--set nexusProxy.enabled=falsecat &lt;&lt; EOF &gt; svc-nexus.yamlapiVersion: v1kind: Servicemetadata: name: sonatype-nexus namespace: middleware labels: app: sonatype-nexusspec: type: NodePort ports: - port: 8081 name: http1 targetPort: 8081 nodePort: 31001 - port: 8082 name: http2 targetPort: 8082 nodePort: 31002 selector: app: sonatype-nexusEOFkubectl apply -f svc-nexus.yamlrm -f svc-nexus.yaml helm-gafana12345helm repo add bitnami https://charts.bitnami.com/bitnamihelm upgrade --install grafana bitnami/grafana -n tools \\--set global.storageClass=sc-nfs \\--set image.tag=8.1.2-debian-10-r6 \\--set admin.password=admin123 helm-nacos123456789101112131415161718#!/bin/bash## setp1. git clone https://github.com/nacos-group/nacos-k8s.git#### setp2. wget https://github.com/alibaba/nacos/blob/develop/distribution/conf/nacos-mysql.sql#### setp3. run sql in your mysql#### setp4. sed -i s/&#x27;mysql.port: &#123;&#123; .port | default 3306&#125;&#125;&#x27;/&#x27;mysql.port: &quot;&#123;&#123; .port | default 3306&#125;&#125;&quot;&#x27;/g ./nacos-k8s/helm/templates/configmap.yamlhelm upgrade --install nacos ./nacos-k8s/helm/ -n tools \\--set global.mode=standalone \\--set nacos.image.tag=1.4.2 \\--set nacos.storage.type=mysql \\--set nacos.storage.db.host=mysql \\--set nacos.storage.db.name=nacos_config \\--set nacos.storage.db.port=3306 \\--set nacos.storage.db.username=root \\--set nacos.storage.db.password=admin123 helm-redis12345678helm repo add bitnami https://charts.bitnami.com/bitnamihelm upgrade --install redis bitnami/redis -n tools \\--set global.storageClass=sc-nfs \\--set global.redis.password=admin123 \\--set image.tag=6.2.5-debian-10-r34 \\--set architecture=standalone \\--set master.service.type=NodePort \\--set master.service.nodePort=30379 helm-gitlab1234567891011helm upgrade --install gitlab c7n/gitlab-ha --version 0.2.4 -n tools \\--set expose.type=clusterIP \\--set persistence.enabled=true \\--set persistence.persistentVolumeClaim.core.storageClass=sc-nfs \\--set persistence.persistentVolumeClaim.core.size=10Gi \\--set persistence.persistentVolumeClaim.database.storageClass=sc-nfs \\--set persistence.persistentVolumeClaim.database.size=10Gi \\--set persistence.persistentVolumeClaim.redis.storageClass=sc-nfs \\--set persistence.persistentVolumeClaim.redis.size=5Gi \\--set core.replicas=1##--set core.image.tag=v12.3.5 \\","categories":[{"name":"devops","slug":"devops","permalink":"https://biglovewheat.gihub.io/categories/devops/"}],"tags":[{"name":"devops","slug":"devops","permalink":"https://biglovewheat.gihub.io/tags/devops/"},{"name":"k8s","slug":"k8s","permalink":"https://biglovewheat.gihub.io/tags/k8s/"}]},{"title":"ELK-安装","slug":"elk-安装","date":"2022-08-16T16:00:00.000Z","updated":"2022-09-08T12:24:30.952Z","comments":true,"path":"2022/08/17/elk-安装/","link":"","permalink":"https://biglovewheat.gihub.io/2022/08/17/elk-%E5%AE%89%E8%A3%85/","excerpt":"","text":"ELK-安装ElasticSearch 安装配置12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849## 安装tar -xvf elasticsearch-7.13.1-linux-x86_64.tar.gzmv elasticsearch-7.13.1-linux-x86_64 /usr/local/elasticsearch## 创建用户useradd espasswd eschown -R es:es /usr/local/elasticsearch## linux参数设置vi /etc/sysctl.conffs.file-max=655360vm.max_map_count = 262144sysctl -pvi /etc/security/limits.conf* soft nproc 20480* hard nproc 20480* soft nofile 65536* hard nofile 65536* soft memlock unlimited* hard memlock unlimited## 重新登录生效，查看ulimit -arm -f /etc/security/limits.d/20-nproc.conf## 配置vi /usr/local/elasticsearch/config/elasticsearch.yml#cluster.name: elkbigdata#node.name: server1#node.master: true#node.data: truepath.data: /data/elasticsearch#path.logs: /usr/local/elasticsearch/logs#bootstrap.memory_lock: truenetwork.host: 192.168.8.221#http.port: 9200#discovery.zen.minimum_master_nodes: 1#discovery.seed_hosts: [&quot;127.0.0.1&quot;, &quot;[::1]&quot;]#discovery.seed_providers: filecluster.initial_master_nodes: &quot;vm221&quot;##discovery.zen.ping.unicast.hosts: [&quot;172.16.213.37:9300&quot;,&quot;172.16.213.78:9300&quot;]## 启动脚本#!/bin/bashsu - es -c &quot;/usr/local/elasticsearch/bin/elasticsearch -d&quot; ES常用命令12#查看索引curl localhost:9200/_cat/indices?v zookepper 安装配置123456789101112131415161718192021## 安装tar -xvf tar -xvf apache-zookeeper-3.6.3-bin.tar.gzmv apache-zookeeper-3.6.3-bin /usr/local/zookeeper## 配置vi /usr/local/zookeeper/conf/zoo.cfgtickTime=2000initLimit=10syncLimit=5dataDir=/data/zookeeperclientPort=2181server.1=192.168.8.225:2888:3888server.2=192.168.8.226:2888:3888server.3=192.168.8.227:2888:3888set myid fileecho &quot;1&quot; &gt;/data/zookeeper/myid## 启动脚本#!/bin/bash/usr/local/zookeeper/bin/zkServer.sh start kafka 安装配置123456789101112131415161718192021222324252627282930313233343536373839## 安装tar -xvf kafka_2.11-2.2.2.tgzmv kafka_2.11-2.2.2 /usr/local/kafka## 配置文件vi /usr/local/kafka/config/server.propertiesbroker.id=0num.network.threads=3num.io.threads=8socket.send.buffer.bytes=102400socket.receive.buffer.bytes=102400socket.request.max.bytes=104857600log.dirs=/usr/local/kafka/logsnum.partitions=3num.recovery.threads.per.data.dir=1offsets.topic.replication.factor=1transaction.state.log.replication.factor=1transaction.state.log.min.isr=1log.retention.hours=60log.segment.bytes=1073741824log.retention.check.interval.ms=300000zookeeper.connect=192.168.8.225:2181,192.168.8.226:2181,192.168.8.227:2181zookeeper.connection.timeout.ms=6000group.initial.rebalance.delay.ms=0## 启动脚本#!/bin/bashnohup /usr/local/kafka/bin/kafka-server-start.sh /usr/local/kafka/config/server.properties 1&gt;kafka.log 2&gt;&amp;1 &amp;tail -f kafka.log## 常用操作# 查看topicbin/kafka-topics.sh --zookeeper 192.168.8.225:2181,192.168.8.226:2181,192.168.8.227:2181 --list# 创建topicbin/kafka-topics.sh --zookeeper 192.168.8.225:2181,192.168.8.226:2181,192.168.8.227:2181 --create --topic elktopic \\&gt; --partitions 3 --replication-factor 1# 查看topic内容bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic elktopic --from-beginning filebeat 安装配置1234567891011121314151617181920212223242526272829## 安装tar -xvf filebeat-7.13.1-linux-x86_64.tar.gzmv filebeat-7.13.1-linux-x86_64 /usr/local/filebeat## 配置vi /usr/local/filebeat/filebeat.ymlfilebeat.inputs:- type: log enabled: true paths: - /var/log/secure fields: log_topic: topic1output.kafka: hosts: [&quot;192.168.8.225:9092&quot;, &quot;192.168.8.226:9092&quot;, &quot;192.168.8.227:9092&quot;] enabled: true topic: &#x27;%&#123;[fields.log_topic]&#125;&#x27; partition.round_robin: reachable_only: false required_acks: 1 compression: gzip max_message_bytes: 1000000## 启动脚本#!/bin/bash/usr/local/filebeat/filebeat -e -c /usr/local/filebeat/filebeat.yml &gt;filebeat.log 2&gt;&amp;1 &amp;tail -f filebeat.log logstash 安装配置12345678910111213141516171819202122## 安装tar -xvf logstash-7.13.1-linux-x86_64.tar.gzmv logstash-7.13.1-linux-x86_64 /usr/local/logstash## 配置cat /usr/local/logstash/config/logstash.confinput &#123; kafka &#123; bootstrap_servers =&gt; &quot;192.168.8.225:9092,192.168.8.226:9092,192.168.8.227:9092&quot; topics =&gt; [&quot;topic1&quot;] &#125;&#125;output &#123; elasticsearch &#123; hosts =&gt; &quot;192.168.8.221:9200&quot; index =&gt; &quot;securelog-%&#123;+YYYY-MM-dd&#125;&quot; &#125;&#125;## 启动脚本#!/bin/bash/usr/local/logstash/bin/logstash -f /usr/local/logstash/config/logstash.conf &gt;logstash.log 2&gt;&amp;1 &amp; Kibana 安装配置12345678910111213141516## 安装tar -xvf logstash-7.13.1-linux-x86_64.tar.gzmv logstash-7.13.1-linux-x86_64 /usr/local/logstash## 配置vi /usr/local/kibana/config/kibana.ymlserver.port: 5601server.host: &quot;192.168.8.221&quot;elasticsearch.hosts: &quot;http://192.168.8.221:9200&quot;## 启动脚本#!/bin/bashnohup /usr/local/kibana/bin/kibana --allow-root &gt;kibana.log 2&gt;&amp;1 &amp;## 索引设置## Management--&gt;Stack Management--&gt;Kibana--&gt;Index Patterns","categories":[{"name":"日志","slug":"日志","permalink":"https://biglovewheat.gihub.io/categories/%E6%97%A5%E5%BF%97/"}],"tags":[{"name":"日志","slug":"日志","permalink":"https://biglovewheat.gihub.io/tags/%E6%97%A5%E5%BF%97/"}]},{"title":"Linux-Vsftp-安装","slug":"linux-vsftp-安装","date":"2022-08-14T16:00:00.000Z","updated":"2022-09-08T12:24:30.956Z","comments":true,"path":"2022/08/15/linux-vsftp-安装/","link":"","permalink":"https://biglovewheat.gihub.io/2022/08/15/linux-vsftp-%E5%AE%89%E8%A3%85/","excerpt":"","text":"Linux-Vsftp-安装版本安装12345678910111213yum install -y vsftpd ftpuseradd vsftpecho vsftp@123\\! |passwd vsftp --stdinmkdir /ftpusermod vsftp -d /ftpchown vsftp:vsftp /ftpvi /etc/vsftpd/vsftpd.conf#anonymous_enable=YESsystemctl start vsftpdsystemctl enable vsftpd shell12345678910#!/bin/bashftp -n &lt;&lt;- EOFopen 192.168.1.1user vsftp vsftp@123!cd /ftpbinpromptmput *.logbyeEOF 配置123456789101112## 关闭匿名anonymous_enable=NO## 开放本地用户local_enable=YES## 需要开放其他用户编辑:#1 /etc/vsftpd/ftpusers --&gt;ftp黑名单,名单上的用户不能登录（与设置无关）#2 /etc/vsftpd/userlist --&gt;ftp黑名单,名单上的用户不能登录（userlist_enable=YES、userlist_deny=YES；都是默认）#/etc/vsftpd/vsftpd.conf #主配置文件 或 /etc/vsftpd.conf#/etc/vsftpd/ftpusers #不能访问FTP用户列表 或 /etc/ftpusers#/etc/vsftpd/user_list #不能访问FTP用户列表","categories":[{"name":"linux","slug":"linux","permalink":"https://biglovewheat.gihub.io/categories/linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://biglovewheat.gihub.io/tags/linux/"}]},{"title":"Mysql-主从复制配置","slug":"mysql-主从复制配置","date":"2022-08-10T16:00:00.000Z","updated":"2022-09-08T12:24:30.956Z","comments":true,"path":"2022/08/11/mysql-主从复制配置/","link":"","permalink":"https://biglovewheat.gihub.io/2022/08/11/mysql-%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E9%85%8D%E7%BD%AE/","excerpt":"","text":"Mysql-主从复制配置master开启binlog12345678vi /etc/my.cnflog-bin=mysql-binbinlog_format=mixedserver-id=1auto_increment_increment=2auto_increment_offset=1replicate-do-db=monitor master重启1systemctl restart mysqld master设置复制用户12345678910mysql&gt;GRANT REPLICATION SLAVE ON *.* TO &#x27;repuser&#x27;@&#x27;192.168.8.%&#x27; IDENTIFIED BY &#x27;2014Picc!!!&#x27;;mysql&gt;FLUSH PRIVILEGES;mysql&gt; show master status;+------------------+----------+--------------+------------------+-------------------+| File | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |+------------------+----------+--------------+------------------+-------------------+| mysql-bin.000001 | 1977 | | | |+------------------+----------+--------------+------------------+-------------------+--记录file和position slave设置参数123vi /etc/my.cnfserver-id=2 slave重启1systemctl restart mysqld slave开启复制1mysql&gt;change master to master_host=&#x27;192.168.8.201&#x27;, master_user=&#x27;repuser&#x27;, master_password=&#x27;2014Picc!!!&#x27;, master_log_file=&#x27;mysql-bin.000001&#x27;, master_log_pos=612; slave查看状态1mysql&gt;show slave status\\G","categories":[{"name":"数据库","slug":"数据库","permalink":"https://biglovewheat.gihub.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"}],"tags":[{"name":"mysql","slug":"mysql","permalink":"https://biglovewheat.gihub.io/tags/mysql/"}]},{"title":"Mysql-慢日志处理","slug":"mysql-慢日志处理","date":"2022-08-10T16:00:00.000Z","updated":"2022-09-08T12:24:30.956Z","comments":true,"path":"2022/08/11/mysql-慢日志处理/","link":"","permalink":"https://biglovewheat.gihub.io/2022/08/11/mysql-%E6%85%A2%E6%97%A5%E5%BF%97%E5%A4%84%E7%90%86/","excerpt":"","text":"Mysql-慢日志处理查看参数12345678mysql&gt; show variables like &#x27;slow_query%&#x27;;+---------------------+-------------------------------+| Variable_name | Value |+---------------------+-------------------------------+| slow_query_log | OFF || slow_query_log_file | /var/lib/mysql/vm201-slow.log |+---------------------+-------------------------------+3 rows in set (0.00 sec) 开启慢日志123456vi /etc/my.cnfslow_query_log=1slow_query_log_file=/var/lib/mysql/vm201-slow.log#default 10log_query_time=10 分析工具1234mysqldumpslow -s at -t 20 /var/lib/mysql/vm201-slow.log-s at sort by query time-t 20 top 20","categories":[{"name":"数据库","slug":"数据库","permalink":"https://biglovewheat.gihub.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"}],"tags":[{"name":"mysql","slug":"mysql","permalink":"https://biglovewheat.gihub.io/tags/mysql/"}]},{"title":"AWS-Linux-Chrony-时间同步","slug":"aws-linux-chrony-时间同步","date":"2022-08-09T16:00:00.000Z","updated":"2022-09-08T12:24:30.952Z","comments":true,"path":"2022/08/10/aws-linux-chrony-时间同步/","link":"","permalink":"https://biglovewheat.gihub.io/2022/08/10/aws-linux-chrony-%E6%97%B6%E9%97%B4%E5%90%8C%E6%AD%A5/","excerpt":"","text":"AWS-Linux-Chrony-时间同步配置chrony同步12345678910111213141516171819202122232425262728293031323334353637383940## 配置aws时间服务器vi /etc/chrony.conf server 169.254.169.123 prefer iburst minpoll 4 maxpoll 4## 重启chronysystemctl restart chronyd## 查看同步情况chronyc sources -v210 Number of sources = 1 .-- Source mode &#x27;^&#x27; = server, &#x27;=&#x27; = peer, &#x27;#&#x27; = local clock. / .- Source state &#x27;*&#x27; = current synced, &#x27;+&#x27; = combined , &#x27;-&#x27; = not combined,| / &#x27;?&#x27; = unreachable, &#x27;x&#x27; = time may be in error, &#x27;~&#x27; = time too variable.|| .- xxxx [ yyyy ] +/- zzzz|| Reachability register (octal) -. | xxxx = adjusted offset,|| Log2(Polling interval) --. | | yyyy = measured offset,|| \\ | | zzzz = estimated error.|| | | \\MS Name/IP address Stratum Poll Reach LastRx Last sample ===============================================================================^* 169.254.169.123 3 4 377 11 -5483ns[ -10us] +/- 410us## 验证 chronyc trackingReference ID : A9FEA97B (169.254.169.123)Stratum : 4Ref time (UTC) : Wed Aug 10 03:04:51 2022System time : 0.000002134 seconds fast of NTP timeLast offset : +0.000002142 secondsRMS offset : 0.000007061 secondsFrequency : 2.554 ppm slowResidual freq : +0.003 ppmSkew : 0.200 ppmRoot delay : 0.000296080 secondsRoot dispersion : 0.000277362 secondsUpdate interval : 16.3 secondsLeap status : Normal","categories":[{"name":"云原生","slug":"云原生","permalink":"https://biglovewheat.gihub.io/categories/%E4%BA%91%E5%8E%9F%E7%94%9F/"}],"tags":[{"name":"aws","slug":"aws","permalink":"https://biglovewheat.gihub.io/tags/aws/"},{"name":"linux","slug":"linux","permalink":"https://biglovewheat.gihub.io/tags/linux/"}]},{"title":"Jenkins-Gitlab-webhook配置","slug":"jenkins-gitlab-webhook配置","date":"2022-08-08T16:00:00.000Z","updated":"2022-09-08T12:24:30.954Z","comments":true,"path":"2022/08/09/jenkins-gitlab-webhook配置/","link":"","permalink":"https://biglovewheat.gihub.io/2022/08/09/jenkins-gitlab-webhook%E9%85%8D%E7%BD%AE/","excerpt":"","text":"Jenkins-Gitlab-webhook配置Gitlab设置access token用户头像–Preferences–访问令牌 把key复制下来 Gitlab项目配置webhook项目–设置–webhook 分别填入： 网址：jenkins网址+generic-webhook-trigger&#x2F;invoke?token&#x3D;yourtoken 推送事件：可以指定分支或tag 去掉启用ssl验证 jenkins安装Generic Webhook Trigger插件jenkins项目配置webhook 配置完成后，只要分支有推送事件，会触发jenkins构建","categories":[{"name":"devops","slug":"devops","permalink":"https://biglovewheat.gihub.io/categories/devops/"}],"tags":[{"name":"devops","slug":"devops","permalink":"https://biglovewheat.gihub.io/tags/devops/"},{"name":"git","slug":"git","permalink":"https://biglovewheat.gihub.io/tags/git/"},{"name":"jenkins","slug":"jenkins","permalink":"https://biglovewheat.gihub.io/tags/jenkins/"}]},{"title":"K8s-Evicted-Pod处理","slug":"k8s-evicted-pod处理","date":"2022-08-08T16:00:00.000Z","updated":"2022-09-08T12:24:30.955Z","comments":true,"path":"2022/08/09/k8s-evicted-pod处理/","link":"","permalink":"https://biglovewheat.gihub.io/2022/08/09/k8s-evicted-pod%E5%A4%84%E7%90%86/","excerpt":"","text":"K8s-Evicted-Pod处理现象k8s出现很多Evicted Pod 排查12kubectl describe pods farm-server-789ddb7b4c-5jltb -n dev-3 |grep -i messageMessage: Pod The node had condition: [DiskPressure]. 原因k8s节点磁盘达到85%触发node驱逐pod 解决123456789# 1.降低磁盘使用率## 2.修改kubelet启动参数vi /usr/lib/systemd/system/kubelet.service.d/10-kubeadm.confEnvironment=&quot;KUBELET_KUBECONFIG_ARGS=--bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.conf --kubeconfig=/etc/kubernetes/kubelet.conf --eviction-hard=nodefs.available&lt;5%&quot;systemctl daemon-reloadsystemctl restart kubelet## 删除evicted的podkubectl -n base get pods |grep Evicted |awk &#x27;&#123;print $1&#125;&#x27; |xargs kubectl -n base delete pods","categories":[{"name":"devops","slug":"devops","permalink":"https://biglovewheat.gihub.io/categories/devops/"}],"tags":[{"name":"devops","slug":"devops","permalink":"https://biglovewheat.gihub.io/tags/devops/"},{"name":"k8s","slug":"k8s","permalink":"https://biglovewheat.gihub.io/tags/k8s/"}]},{"title":"K8s-ingress-安装","slug":"k8s-ingress-安装","date":"2022-08-08T16:00:00.000Z","updated":"2022-09-08T12:24:30.955Z","comments":true,"path":"2022/08/09/k8s-ingress-安装/","link":"","permalink":"https://biglovewheat.gihub.io/2022/08/09/k8s-ingress-%E5%AE%89%E8%A3%85/","excerpt":"","text":"K8s-ingress-安装安装1234567891011helm repo add nginx-stable https://helm.nginx.com/stablehelm upgrade --install nginx-ingress nginx-stable/nginx-ingress -n kube-system \\--set controller.kind=daemonset \\--set ingressClass=nginx \\--set setAsDefaultIngress=truekubectl patch daemonset nginx-ingress-nginx-ingress -n kube-system -p=&#x27;&#123;&quot;spec&quot;:&#123;&quot;template&quot;: &#123;&quot;spec&quot;: &#123;&quot;tolerations&quot;: [&#123;&quot;key&quot;: &quot;node-role.kubernetes.io/master&quot;, &quot;effect&quot;: &quot;NoSchedule&quot;&#125;]&#125;&#125;&#125;&#125;&#x27;## for k8s 1.18--version 0.10.4 例子1234567891011121314151617181920212223242526272829303132333435363738394041apiVersion: networking.k8s.io/v1kind: Ingressmetadata: name: ing-nginx namespace: app annotations: kubernetes.io/ingress.class: nginxspec: rules: - host: ng.biglovewheat1.com http: paths: - pathType: Prefix path: &quot;/&quot; backend: service: name: nginx port: number: 80---apiVersion: networking.k8s.io/v1beta1kind: Ingressmetadata: name: saas-operation namespace: dev-3 annotations: kubernetes.io/ingress.class: nginx nginx.ingress.kubernetes.io/cors-allow-credentials: &quot;true&quot; nginx.ingress.kubernetes.io/cors-allow-headers: &#x27;*&#x27; nginx.ingress.kubernetes.io/cors-allow-methods: PUT, GET, POST, OPTIONS, DELETE nginx.ingress.kubernetes.io/cors-allow-origin: http://saas-operation.abc.com nginx.ingress.kubernetes.io/enable-cors: &quot;true&quot;spec: rules: - host: saas-operation.abc.com http: paths: - path: / backend: serviceName: saas-operation servicePort: 80 ingress-413-错误1234567## ingress error## 413 Request Entity Too Largemetadata: annotations: nginx.ingress.kubernetes.io/proxy-body-size: &quot;0&quot; nginx.ingress.kubernetes.io/proxy-read-timeout: &quot;600&quot; nginx.ingress.kubernetes.io/proxy-send-timeout: &quot;600&quot;","categories":[{"name":"devops","slug":"devops","permalink":"https://biglovewheat.gihub.io/categories/devops/"}],"tags":[{"name":"devops","slug":"devops","permalink":"https://biglovewheat.gihub.io/tags/devops/"},{"name":"k8s","slug":"k8s","permalink":"https://biglovewheat.gihub.io/tags/k8s/"}]},{"title":"Linux-iftop-流量监控","slug":"linux-iftop-流量监控","date":"2022-08-08T16:00:00.000Z","updated":"2022-09-08T12:24:30.955Z","comments":true,"path":"2022/08/09/linux-iftop-流量监控/","link":"","permalink":"https://biglovewheat.gihub.io/2022/08/09/linux-iftop-%E6%B5%81%E9%87%8F%E7%9B%91%E6%8E%A7/","excerpt":"","text":"Linux-iftop-流量监控1234567891011## 安装yum install -y epel-releaseyum install -y iftop## 参数-i 指定网卡-n 直接显示IP-N 直接显示端口号-P 同时显示IP和端口号iftop -i eth0 -PNn","categories":[{"name":"监控","slug":"监控","permalink":"https://biglovewheat.gihub.io/categories/%E7%9B%91%E6%8E%A7/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://biglovewheat.gihub.io/tags/linux/"},{"name":"监控","slug":"监控","permalink":"https://biglovewheat.gihub.io/tags/%E7%9B%91%E6%8E%A7/"}]},{"title":"Chattr-Crontab加锁","slug":"chattr-crontab加锁","date":"2022-08-07T16:00:00.000Z","updated":"2022-09-08T12:24:30.952Z","comments":true,"path":"2022/08/08/chattr-crontab加锁/","link":"","permalink":"https://biglovewheat.gihub.io/2022/08/08/chattr-crontab%E5%8A%A0%E9%94%81/","excerpt":"","text":"Chattr-Crontab加锁linux安全加固，利用chattr命令对文件加锁，防止非法修改crontab 12345678## crontab加锁for a in `ls /var/spool/cron/`; do chattr +i /var/spool/cron/$a; done## 查看锁lsattr /var/spool/cron/*## 解锁for a in `ls /var/spool/cron/`; do chattr -i /var/spool/cron/$a; done","categories":[{"name":"安全","slug":"安全","permalink":"https://biglovewheat.gihub.io/categories/%E5%AE%89%E5%85%A8/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://biglovewheat.gihub.io/tags/linux/"},{"name":"安全","slug":"安全","permalink":"https://biglovewheat.gihub.io/tags/%E5%AE%89%E5%85%A8/"}]},{"title":"Nmon-监控脚本","slug":"nmon-监控脚本","date":"2022-08-07T16:00:00.000Z","updated":"2022-09-08T12:24:30.957Z","comments":true,"path":"2022/08/08/nmon-监控脚本/","link":"","permalink":"https://biglovewheat.gihub.io/2022/08/08/nmon-%E7%9B%91%E6%8E%A7%E8%84%9A%E6%9C%AC/","excerpt":"","text":"Nmon-监控脚本监控脚本1234567891011121314##保留一周cat /data/nmon/moni.sha=`hostname`b=`date |awk &#x27;&#123;print substr($3,1,2)&#125;&#x27;`/usr/bin/nmon -f -s 300 -c 288 -t -F /tmp/nmondata/$a&quot;_&quot;$b.nmon##保留一月a=`hostname`b=`date | awk &#x27;&#123;print substr($0,1,3)&#125;&#x27;`if [ -f /tmp/nmondata/$a&quot;_&quot;$b.nmon ];thenrm /tmp/nmondata/$a&quot;_&quot;$b.nmonfi/usr/bin/nmon -f -s 300 -c 288 -t -F /tmp/nmondata/$a&quot;_&quot;$b.nmon crontab10 0 * * * /data/nmon/moni.sh","categories":[{"name":"监控","slug":"监控","permalink":"https://biglovewheat.gihub.io/categories/%E7%9B%91%E6%8E%A7/"}],"tags":[{"name":"监控","slug":"监控","permalink":"https://biglovewheat.gihub.io/tags/%E7%9B%91%E6%8E%A7/"}]},{"title":"Shell-if判断","slug":"shell-if判断","date":"2022-08-07T16:00:00.000Z","updated":"2022-09-08T12:24:30.958Z","comments":true,"path":"2022/08/08/shell-if判断/","link":"","permalink":"https://biglovewheat.gihub.io/2022/08/08/shell-if%E5%88%A4%E6%96%AD/","excerpt":"","text":"Shell-if判断1234if [[ &quot;v$&#123;MODE&#125;&quot; == &quot;vstandalone&quot; ]];thendoecho 111done","categories":[{"name":"shell","slug":"shell","permalink":"https://biglovewheat.gihub.io/categories/shell/"}],"tags":[{"name":"shell","slug":"shell","permalink":"https://biglovewheat.gihub.io/tags/shell/"}]},{"title":"Shell清理脚本","slug":"shell-清理脚本","date":"2022-08-07T16:00:00.000Z","updated":"2022-09-08T12:24:30.958Z","comments":true,"path":"2022/08/08/shell-清理脚本/","link":"","permalink":"https://biglovewheat.gihub.io/2022/08/08/shell-%E6%B8%85%E7%90%86%E8%84%9A%E6%9C%AC/","excerpt":"","text":"Shell清理脚本清理脚本12345678910111213141516171819#!/bin/bashdate## cleanup /data/webapp/*/bak/*.tar.gz; leave last 10 file##find /data/webapp/*/bak -type d |while read rowdocd $rowls -t *.tar.gz |sed -n &#x27;11,$p&#x27; | xargs rm -vfdone## cleanup /data/*/logs/*.log## 找到并清空文件find /data/*/logs/ -name &quot;*.log&quot; |awk &#x27;&#123;print &quot;echo 11 &gt;&quot;$0&#125;&#x27; |sh## cleanup /data/*/app/*.jar; leave last 10 file##find /data/*/app -type d |while read rowdocd $rowls -t *.jar |sed -n &#x27;11,$p&#x27; | xargs rm -vfdone crontab133 5 * * * /data/cleanup.sh &gt;&gt; /data/cleanup.log 2&gt;&amp;1","categories":[{"name":"shell","slug":"shell","permalink":"https://biglovewheat.gihub.io/categories/shell/"}],"tags":[{"name":"shell","slug":"shell","permalink":"https://biglovewheat.gihub.io/tags/shell/"}]},{"title":"Https-握手流程","slug":"https-握手流程","date":"2022-08-04T16:00:00.000Z","updated":"2022-09-08T12:24:30.954Z","comments":true,"path":"2022/08/05/https-握手流程/","link":"","permalink":"https://biglovewheat.gihub.io/2022/08/05/https-%E6%8F%A1%E6%89%8B%E6%B5%81%E7%A8%8B/","excerpt":"","text":"Https-握手流程1、客户端向服务器端发起https通信请求 2、服务器端响应并发送公钥 3、客户端验证公钥 4、客户端生成通信秘钥（随机数） 5、客户端用公钥加密通信秘钥并发送到服务器端 6、服务器端用私钥解密获取通信秘钥 7、服务器端和客户端利用通信秘钥对数据进行加密通讯","categories":[{"name":"基础概念","slug":"基础概念","permalink":"https://biglovewheat.gihub.io/categories/%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/"}],"tags":[{"name":"http","slug":"http","permalink":"https://biglovewheat.gihub.io/tags/http/"},{"name":"基础概念","slug":"基础概念","permalink":"https://biglovewheat.gihub.io/tags/%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/"}]},{"title":"Nginx-too-many-open-files","slug":"nginx-too-many-open-files","date":"2022-08-04T16:00:00.000Z","updated":"2022-09-08T12:24:30.957Z","comments":true,"path":"2022/08/05/nginx-too-many-open-files/","link":"","permalink":"https://biglovewheat.gihub.io/2022/08/05/nginx-too-many-open-files/","excerpt":"","text":"Nginx-too-many-open-files现象Too many open files 处理12345678910111213141516171819202122232425262728293031323334353637## 查看ulimit -aulimit -n## 修改-session生效ulimit -n 65535## 修改-永久生效-需重启vi /etc/security/limits.conf* soft nofile 65535* hard nofile 65535* soft nproc 65535* hard nproc 65535reboot## 修改配置文件events &#123;worker_connections 4096;use epoll;multi_accept on;&#125;## 修改service参数systemctl status nginxvi /usr/lib/systemd/system/nginx.service[Service]增加LimitNOFILE=65535## 重启nginxsystemctl daemon-reloadsystemctl restart nginx## 检查ps -ef |grep nginxcat /proc/31668/limitsMax open files 65535 65535 files","categories":[{"name":"middleware","slug":"middleware","permalink":"https://biglovewheat.gihub.io/categories/middleware/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://biglovewheat.gihub.io/tags/linux/"},{"name":"nginx","slug":"nginx","permalink":"https://biglovewheat.gihub.io/tags/nginx/"}]},{"title":"Nginx-安装配置","slug":"nginx-编译安装","date":"2022-08-04T16:00:00.000Z","updated":"2022-09-08T12:24:30.957Z","comments":true,"path":"2022/08/05/nginx-编译安装/","link":"","permalink":"https://biglovewheat.gihub.io/2022/08/05/nginx-%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85/","excerpt":"","text":"Nginx-安装配置版本centos 7 nginx 1.2x 安装12345678910yum -y install gcc gcc-c++ make automake autoconf pcre \\pcre-devel zlib zlib-devel openssl openssl-devel libtool./configure --prefix=/usr/local/nginx \\--with-http_ssl_module \\--with-http_stub_status_module \\--with-http_gzip_static_module \\--with-pcre --with-streammake &amp;&amp; make install 配置12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061user root;worker_processes auto;# Load dynamic modules. See /usr/share/doc/nginx/README.dynamic.include /usr/share/nginx/modules/*.conf;events &#123;use epoll;worker_connections 65535;#worker工作方式：串行multi_accept on;&#125;#stream &#123;# log_format proxy &#x27;$remote_addr [$time_local] &#x27;# &#x27;$protocol $status $bytes_sent $bytes_received &#x27;# &#x27;$session_time &quot;$upstream_addr&quot; &#x27;# &#x27;&quot;$upstream_bytes_sent&quot; &quot;$upstream_bytes_received&quot; &quot;$upstream_connect_time&quot;&#x27;;# access_log /var/log/nginx/tcp-access.log proxy ;# open_log_file_cache off;# include /etc/nginx/conf.d/*.stream;#&#125;http &#123;include mime.types;default_type application/octet-stream;sendfile on;tcp_nopush on;## uploadclient_max_body_size 2g;#keepalive_timeout 0;keepalive_timeout 65;#### gzip module begin ####gzip on;#gzip_comp_level 4;#gzip_buffers 4 16k;#gzip_types text/plain application/javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;#gzip_min_length 5k;#gzip_vary on;#gzip_proxied any#### gzip module end ###include /usr/local/nginx/conf/conf.d/*.conf;server &#123;listen 80;server_name localhost;location / &#123;root html;index index.html index.htm;&#125;location = /50x.html &#123;root html;&#125;&#125; stream模块1234567891011121314151617181920## nginx从1.9.0开始，新增加了一个stream模块，用来实现四层协议的转发、代理或者负载均衡等## stream模块的用法和http模块差不多，语法基本一致，支持server，hash， listen， proxy_pass等指令stream &#123; upstream cloudsocket &#123; hash $remote_addr consistent; # $binary_remote_addr; server 172.19.20.7:3306 weight=5 max_fails=3 fail_timeout=300s; &#125; server &#123; listen 3306;#数据库服务器监听端口 server_name mysql1.tools.hrtop.net; proxy_connect_timeout 120s; proxy_send_timeout 120; proxy_read_timeout 120; proxy_buffer_size 256k; proxy_buffers 8 128k; proxy_pass cloudsocket;&#125; ssl配置123456789101112131415161718server &#123; listen 443 ssl; server_name sit.biglovewheat.com; ssl_certificate certs/ssl.crt; ssl_certificate_key certs/ssl.key; ssl_session_cache shared:SSL:1m; ssl_session_timeout 5m; ssl_ciphers HIGH:!aNULL:!MD5; ssl_prefer_server_ciphers on; location / &#123; root /nfsdata/dist; index index.html index.htm; &#125;&#125; websocket123456789101112131415161718upstream websocket&#123;server hx-app-01:8100 weight=1;&#125;server &#123;listen 8100;location / &#123;client_max_body_size 100M;proxy_set_header Host $host;proxy_set_header Upgrade $http_upgrade; #支持wssproxy_set_header Connection &quot;upgrade&quot;; #支持wssproxy_pass http://websocket;&#125;location = /50x.html &#123;root /usr/share/nginx/html;&#125;&#125; 重定向问题1234## https://blog.csdn.net/weixin_34186128/article/details/91742483if (-d $request_filename)&#123;rewrite [^/]$ $scheme://$http_host$uri/ permanent;&#125; retry123456location / &#123; add_header &#x27;Access-Control-Allow-Origin&#x27; &#x27;*&#x27; always; root /opt/nginx/dist-saas-operation-new; try_files $uri $uri/ /index.html; index index.html index.htm;&#125; 自动目录123456 location / &#123; autoindex on; #是否打开配置自动列目录 autoindex_exact_size on; #是否打开文件大小展示 autoindex_localtime on; #是否打开显示文件的时间 root /filepath/&#125; 允许参数带有下划线12## http模块增加underscores_in_headers on","categories":[{"name":"middleware","slug":"middleware","permalink":"https://biglovewheat.gihub.io/categories/middleware/"}],"tags":[{"name":"nginx","slug":"nginx","permalink":"https://biglovewheat.gihub.io/tags/nginx/"}]},{"title":"Postgresql-导入导出","slug":"postgresql-导入导出","date":"2022-08-04T16:00:00.000Z","updated":"2022-09-08T12:24:30.957Z","comments":true,"path":"2022/08/05/postgresql-导入导出/","link":"","permalink":"https://biglovewheat.gihub.io/2022/08/05/postgresql-%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA/","excerpt":"","text":"Postgresql-导入导出版本postgresql 13 备份脚本1234567891011121314#!/bin/shDATETIME=$(date +&quot;%Y%m%d%H%M&quot;)cd /pgdata_backup#pg_dumpall -p 5083 &gt; all.sqlpg_dumpall --exclude-database=common -p 5083 -c --if-exists |gzip &gt; part1-all-exclude-common.sql.gzpg_dump --dbname=common --exclude-schema=offline_map -p 5083 -c --if-exists|gzip &gt; part2-common-excluede-offline_map.sql.gztar -cvf pgbackup_all_$&#123;DATETIME&#125;.tar part*.sql.gz --remove-files/usr/local/bin/aws s3 cp pgbackup_all_$&#123;DATETIME&#125;.gz s3://aaa/backup/find /pgdata_backup -mtime +30 -type f -name &quot;*.gz&quot; | xargs rm -f 导出123456pg_dumpall -p 5083 -c --if-exists |gzip &gt; all.sql.gzpg_dump --dbname=testdb -p 5083 -c --if-exists|gzip &gt; testdb.sql.gz## 只导结构pg_dump --dbname=testdb -p 5083 -c --if-exists -s | &gt; testdb.sql.gz 导入1234567## 整库psql -f alldb.sql## 单个数据库create database testdb;psql -f testdb.sql -d testdb","categories":[{"name":"数据库","slug":"数据库","permalink":"https://biglovewheat.gihub.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"}],"tags":[{"name":"postgresql","slug":"postgresql","permalink":"https://biglovewheat.gihub.io/tags/postgresql/"}]},{"title":"Gitlab-异库同步","slug":"gitlab-异库同步","date":"2022-08-03T16:00:00.000Z","updated":"2022-09-08T12:24:30.953Z","comments":true,"path":"2022/08/04/gitlab-异库同步/","link":"","permalink":"https://biglovewheat.gihub.io/2022/08/04/gitlab-%E5%BC%82%E5%BA%93%E5%90%8C%E6%AD%A5/","excerpt":"","text":"Gitlab-异库同步结构123456├── gitlab_sync_ignore.lst # 不同步的库├── gitlab_sync_lib.py # 计算本次需同步的库，分全量和增量├── gitlab_sync.sh # 同步脚本├── gitlab_sync_old.lst├── gitlab_sync_to_full.lst # 全同步列表，脚本生成├── gitlab_sync_to_inc.lst # 增量同步列表，脚本生成 gitlab_sync.sh12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364#!/bin/bashROOT_PATH=/home/gitlab_synccd $ROOT_PATHgit_url1=&quot;192.168.8.1:8090&quot;git_user1=jenkinsgit_key1=xxxxxxxxxxxgit_url2=&quot;10.249.2.40:8690&quot;git_user2=abcgit_key2=xxxxxxxxxxxxgit_group2=&#x27;aa/bb/10/operations&#x27;mkdir -p $ROOT_PATH/repo_fullmkdir -p $ROOT_PATH/repo_incrm -f $ROOT_PATH/gitlab_sync_to_full.lstrm -f $ROOT_PATH/gitlab_sync_to_inc.lst$ROOT_PATH/gitlab_sync_lib.py $git_url1 $git_key1if [ -f &quot;$ROOT_PATH/gitlab_sync_to_full.lst&quot; ]; thencat $ROOT_PATH/gitlab_sync_to_full.lst | while read row;do gitname1=$(echo $row |awk -F &quot;:8090/&quot; &#x27;&#123;print $2&#125;&#x27;) gitname2=$(echo $gitname1| sed &#x27;s/\\//-/g&#x27;) echo &quot;***start full sync ... $row&quot; rm -rf $ROOT_PATH/repo_full/$gitname2 git clone --bare http://$&#123;git_user1&#125;:$&#123;git_key1&#125;@$&#123;git_url1&#125;/$gitname1 $ROOT_PATH/repo_full/$gitname2 cd $ROOT_PATH/repo_full/$gitname2 git push --mirror http://$&#123;git_user2&#125;:$&#123;git_key2&#125;@$&#123;git_url2&#125;/$&#123;git_group2&#125;/$gitname2 cd $ROOT_PATH rm -rf $ROOT_PATH/repo_inc/$gitname2 git clone http://$&#123;git_user1&#125;:$&#123;git_key1&#125;@$&#123;git_url1&#125;/$gitname1 $ROOT_PATH/repo_inc/$gitname2 echo $row &gt;&gt; $ROOT_PATH/gitlab_sync_old.lstcd $ROOT_PATHdonefiif [ -f &quot;$ROOT_PATH/gitlab_sync_to_inc.lst&quot; ]; thencat $ROOT_PATH/gitlab_sync_to_inc.lst | while read row;do gitname1=$(echo $row |awk -F &quot;:8090/&quot; &#x27;&#123;print $2&#125;&#x27;) gitname2=$(echo $gitname1| sed &#x27;s/\\//-/g&#x27;) echo &quot;***start inc sync ... $row&quot; cd $ROOT_PATH/repo_inc/$gitname2 git branch -r | grep -v &#x27;\\-&gt;&#x27; | while read remote; do git branch --track &quot;$&#123;remote#origin/&#125;&quot; &quot;$remote&quot;; done git fetch --all git branch -r |grep -v HEAD |awk -F&quot;origin/&quot; &#x27;&#123;print $2&#125;&#x27; | while read repo; do git checkout $repo;git pull --rebase; done git pull --all --rebase git push --all http://$&#123;git_user2&#125;:$&#123;git_key2&#125;@$&#123;git_url2&#125;/$&#123;git_group2&#125;/$gitname2cd $ROOT_PATHdonefi gitlab_sync_lib.py123456789101112131415161718192021222324252627282930313233343536#!/usr/bin/python3import gitlabimport timeimport osimport sysimport pandas as pdrepo_url = &quot;http://&quot; + sys.argv[1]token = sys.argv[2]df1 = pd.DataFrame(columns=[&#x27;url&#x27;])g1 = gitlab.Gitlab(repo_url, private_token=token)projects = g1.projects.list(all=True)for project in projects: df1 = df1.append(&#123;&#x27;url&#x27;:project.http_url_to_repo&#125;, ignore_index=True)if os.path.isfile(&quot;gitlab_sync_ignore.lst&quot;): df2 = pd.read_csv(&quot;gitlab_sync_ignore.lst&quot;,sep=&#x27; &#x27;,header=None) df2.rename(columns=&#123;df2.columns[0]:&quot;url&quot;&#125;, inplace=True) ##df1-df2 df3 = pd.concat([df1, df2, df2]).drop_duplicates(keep=False)else: df3 = df1if os.path.isfile(&quot;gitlab_sync_old.lst&quot;): df4 = pd.read_csv(&quot;gitlab_sync_old.lst&quot;,sep=&#x27; &#x27;,header=None) df4.rename(columns=&#123;df4.columns[0]:&quot;url&quot;&#125;, inplace=True) ##df5=df3-df4,df4=df3-df5 df5 = pd.concat([df3, df4, df4]).drop_duplicates(keep=False) df4 = pd.concat([df3, df5, df5]).drop_duplicates(keep=False) df4.to_csv(&quot;gitlab_sync_to_inc.lst&quot;,index=0,header=0) df5.to_csv(&quot;gitlab_sync_to_full.lst&quot;,index=0,header=0)else: df5 = df3 df5.to_csv(&quot;gitlab_sync_to_full.lst&quot;,index=0,header=0)","categories":[{"name":"devops","slug":"devops","permalink":"https://biglovewheat.gihub.io/categories/devops/"}],"tags":[{"name":"gitlab","slug":"gitlab","permalink":"https://biglovewheat.gihub.io/tags/gitlab/"},{"name":"shell","slug":"shell","permalink":"https://biglovewheat.gihub.io/tags/shell/"},{"name":"python","slug":"python","permalink":"https://biglovewheat.gihub.io/tags/python/"}]},{"title":"K8s-Centos7-安装","slug":"k8s-centos7-安装","date":"2022-08-03T16:00:00.000Z","updated":"2022-09-08T12:24:30.954Z","comments":true,"path":"2022/08/04/k8s-centos7-安装/","link":"","permalink":"https://biglovewheat.gihub.io/2022/08/04/k8s-centos7-%E5%AE%89%E8%A3%85/","excerpt":"","text":"Kubernetes-Centos7-安装关闭swap&#x2F;selinux&#x2F;firewalld12345678910111213## 关闭swapswapoff -avi /etc/fstab注释掉swap的一行## 关闭selinuxsetenforce 0sed -i &quot;s/SELINUX=enforcing/SELINUX=disabled/g&quot; /etc/selinux/config## 关闭防火墙systemctl disable firewalldsystemctl stop firewalldsystemctl status firewalld 安装docker123456yum install -y yum-utilsyum install -y bash-completionyum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repoyum clean allyum install -y docker-ce-20.10.8sudo systemctl enable docker 配置阿里云镜像加速12345678mkdir -p /etc/dockertee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;&#123; &quot;registry-mirrors&quot;: [&quot;https://nn5bgten.mirror.aliyuncs.com&quot;]&#125;EOFsudo systemctl daemon-reloadsudo systemctl restart docker 修改docker cgroup驱动为systemd12345sed -i &quot;s|ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock|ExecStart=/usr/bin/dockerd --exec-opt native.cgroupdriver=systemd|g&quot; /usr/lib/systemd/system/docker.servicesystemctl daemon-reloadsystemctl restart dockerdocker info | grep -i cgroup 添加k8s仓库1234567cat &lt;&lt;EOF | sudo tee /etc/yum.repos.d/kubernetes.repo[kubernetes]name=Kubernetesbaseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/enabled=1gpgcheck=0EOF 安装kubeadm12345yum list kubeadm --showduplicatesyum install -y kubeadm-1.20.9 kubectl-1.20.9 kubelet-1.20.9systemctl enable kubelet.servicesystemctl restart kubelet 修改网络参数（centos7）123modprobe br_netfilterecho 1 &gt; /proc/sys/net/bridge/bridge-nf-call-iptablesecho 1 &gt; /proc/sys/net/ipv4/ip_forward kubeadm初始化12345kubeadm init --apiserver-advertise-address=0.0.0.0 --apiserver-cert-extra-sans=127.0.0.1 --image-repository registry.aliyuncs.com/google_containers --kubernetes-version v1.20.9 --pod-network-cidr=10.133.0.0/16 \\--image-repository=registry.aliyuncs.com/google_containers## kubeadm 初始化清理（如果失败，可以reset进行清理）kubeadm reset 配置文件123mkdir -p $HOME/.kubesudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/configsudo chown $(id -u):$(id -g) $HOME/.kube/config 安装calico（指定版本）1kubectl apply -f https://docs.projectcalico.org/v3.19/manifests/calico.yaml 节点加入1234567891011121314151617##节点执行到安装完kubeadmkubeadm join 192.168.8.112:6443 --token 74kuf2.6f1pv9lbrkxw5n0k \\ --discovery-token-ca-cert-hash sha256:7566c21fdbc491dac295412629680d3778ba04de933902a842a028e5accbeb47## master节点加入# 主节点运行获取证书kubeadm init phase upload-certs --upload-certskubeadm join 192.168.8.112:6443 --token lb45cr.d5s17hnbgsj6sf5b \\ --discovery-token-ca-cert-hash sha256:7566c21fdbc491dac295412629680d3778ba04de933902a842a028e5accbeb47 \\--control-plane --certificate-key f3657ba47289c8994771aaf2ebd2a90ee335f0fff41b9c1470ad15d21e185094# 错误：# unable to add a new control plane instance a cluster that doesn&#x27;t have a stable controlPlaneEndpoint address# 解决办法：加上controlPlaneEndpointkubectl edit configmap -n kube-system kubeadm-config clusterName: kubernetes controlPlaneEndpoint: 192.168.8.112:6443 kubectl自动补全1echo &quot;source &lt;(kubectl completion bash)&quot; &gt;&gt; /etc/profile; source /etc/profile kubeadm安装后scheduler状态为unhealthy12345678kubectl get cs#备份修改两个文件vi /etc/kubernetes/manifests/kube-controller-manager.yamlvi /etc/kubernetes/manifests/kube-scheduler.yaml去掉 --port=0## 重启kubeletsystemctl restart kubelet","categories":[{"name":"devops","slug":"devops","permalink":"https://biglovewheat.gihub.io/categories/devops/"}],"tags":[{"name":"devops","slug":"devops","permalink":"https://biglovewheat.gihub.io/tags/devops/"},{"name":"k8s","slug":"k8s","permalink":"https://biglovewheat.gihub.io/tags/k8s/"}]},{"title":"Linux-swap扩容","slug":"linux-swap扩容","date":"2022-08-03T16:00:00.000Z","updated":"2022-09-08T12:24:30.955Z","comments":true,"path":"2022/08/04/linux-swap扩容/","link":"","permalink":"https://biglovewheat.gihub.io/2022/08/04/linux-swap%E6%89%A9%E5%AE%B9/","excerpt":"","text":"Linux-swap扩容12345678910111213141516#4Gdd if=/dev/zero of=/swapfile01 bs=1024 count=4096000#8Gdd if=/dev/zero of=/swapfile01 bs=1024 count=8192000## 指定分区类型为swap/sbin/mkswap /swapfile01chmod 0600 /swapfile01## 激活swap分区/sbin/swapon /swapfile01## 设置自动挂载vi /etc/fstab/swapfile01 swap swap defaults 0 0mount -a","categories":[{"name":"linux","slug":"linux","permalink":"https://biglovewheat.gihub.io/categories/linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://biglovewheat.gihub.io/tags/linux/"}]},{"title":"Geoserver-安装","slug":"geoserver-安装","date":"2022-08-02T16:00:00.000Z","updated":"2022-09-08T12:24:30.952Z","comments":true,"path":"2022/08/03/geoserver-安装/","link":"","permalink":"https://biglovewheat.gihub.io/2022/08/03/geoserver-%E5%AE%89%E8%A3%85/","excerpt":"","text":"Geoserver-安装版本1234567centos7/8jdk-1.8geoserver-2.14tomcat-9postgresql-13.2postgis-3.1.1pgrouting-3.3.0 安装postgresql12345678910111213141516171819202122232425## 安装仓库# centos8yum install -y https://download.postgresql.org/pub/repos/yum/reporpms/EL-8-x86_64/pgdg-redhat-repo-latest.noarch.rpm# centos7yum install -y https://download.postgresql.org/pub/repos/yum/reporpms/EL-7-x86_64/pgdg-redhat-repo-latest.noarch.rpm## 安装postgresqlyum install -y postgresql13-server## 初始化/usr/pgsql-13/bin/postgresql-13-setup initdb## 放开访问，其中 trust--信任，不用输密码; md5--密码认证sed -i &#x27;s|host all all 127.0.0.1/32 scram-sha-256|host all all 0.0.0.0/0 md5|g&#x27; /var/lib/pgsql/13/data/pg_hba.conf## 修改监听网段sed -i &quot;s|#listen_addresses = &#x27;localhost&#x27;|listen_addresses = &#x27;*&#x27;|g&quot; /var/lib/pgsql/13/data/postgresql.conf## 修改监听端口sed -i &quot;s|#port = 5432|port = 5083|g&quot; /var/lib/pgsql/13/data/postgresql.conf## 重启数据库systemctl enable postgresql-13systemctl restart postgresql-13 安装postgis和pgrouting12345## 建议先配置epel yum源yum install -y postgis32_13.x86_64yum install -y postgis32_13-utilsyum install -y postgis32_13-clientyum install -y pgrouting_13.x86_64 数据库设置12345678--每个database都需创建create extension postgis;create extension postgis_topology;create extension fuzzystrmatch;create extension address_standardizer;create extension address_standardizer_data_us;create extension postgis_tiger_geocoder;create extension pgrouting; 安装tomcat和geoserver12345678#!/bin/sh## 下载tomcat9和gerserver.war包，把war包放到tomcat的webapps目录下## 启动脚本export JAVA_HOME=/data/soft/jdk1.8.0_301export PATH=$JAVA_HOME/bin:$PATHexport CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar/data/geoserver/apache-tomcat-9.0.64/bin/startup.sh systemd-service参考1234567891011121314151617181920cat &lt;&lt; EOF &gt;/usr/lib/systemd/system/geoserver.service[Unit]Description=geoserverAfter=network.target [Service]Type=forkingUser=rootExecStart=/data/geoserver/startup.shExecReload=/bin/kill -s HUP $MAINPIDExecStop=/bin/kill -s QUIT $MAINPID[Install]WantedBy=multi-user.targetEOFsystemctl daemon-reloadsystemctl enable geoserversystemctl restart geoserver 问题1404-bad-request 参考资料：https://docs.geoserver.org/stable/en/user/security/webadmin/csrf.html 1234## 启动脚本加上环境变量,关闭或开启白名单export GEOSERVER_CSRF_WHITELIST=xxx.com## orexport GEOSERVER_CSRF_DISABLED=true 问题2https代理后，链接还是代理前的链接 设置-全球-proxy base url设置为代理后的链接","categories":[{"name":"gis","slug":"gis","permalink":"https://biglovewheat.gihub.io/categories/gis/"}],"tags":[{"name":"gis","slug":"gis","permalink":"https://biglovewheat.gihub.io/tags/gis/"},{"name":"postgresql","slug":"postgresql","permalink":"https://biglovewheat.gihub.io/tags/postgresql/"}]},{"title":"Gitlab-批量操作","slug":"gitlab-批量操作","date":"2022-08-02T16:00:00.000Z","updated":"2022-09-08T12:24:30.954Z","comments":true,"path":"2022/08/03/gitlab-批量操作/","link":"","permalink":"https://biglovewheat.gihub.io/2022/08/03/gitlab-%E6%89%B9%E9%87%8F%E6%93%8D%E4%BD%9C/","excerpt":"","text":"Gitlab-批量操作利用gitlab-api批量操作 123456789101112131415161718192021222324252627282930313233343536373839404142#!/opt/python3/bin/python3import gitlabimport timeimport osimport sysimport pandas as pdimport requestsimport jsonrepo_url = &quot;http://192.168.8.1:8090&quot;token = &quot;xxxxxxxxxxx&quot;headers=&#123; &quot;PRIVATE-TOKEN&quot; : token&#125;session=requests.Session()df1 = pd.DataFrame(columns=[&#x27;pid&#x27;,&#x27;url&#x27;,&#x27;uid&#x27;,&#x27;uname&#x27;,&#x27;role&#x27;])gl = gitlab.Gitlab(repo_url, private_token=token)projects = gl.projects.list(all=True) ## 获取所有projectfor p in projects:# print(p.id)# if p.id==370: url=repo_url+&quot;/api/v4/projects/&quot;+str(p.id)+&quot;/members&quot; ## 获取project下所有member resp=session.get(url,headers=headers) j_member=json.loads(resp.text) df_member=pd.json_normalize(j_member) for i in range(len(df_member)): df1 = df1.append(&#123;&#x27;pid&#x27;:p.id,&#x27;url&#x27;:p.http_url_to_repo,&#x27;uid&#x27;:df_member.iloc[i][&#x27;id&#x27;],&#x27;uname&#x27;:df_member.iloc[i][&#x27;username&#x27;],&#x27;role&#x27;:df_member.iloc[i][&#x27;access_level&#x27;]&#125;, ignore_index=True)print (df1)df1.to_csv(&#x27;project_member.csv&#x27;,index = False) ## 导出csv#for i in range(len(df1)):# if df1.iloc[i][&#x27;uname&#x27;]==&quot;maiqixian&quot;:# url=repo_url+&quot;/api/v4/projects/&quot;+str(df1.iloc[i][&#x27;pid&#x27;])+&quot;/members/&quot;+str(df1.iloc[i][&#x27;uid&#x27;]) ## 按条件更新member的access_level# print(url)# data=&#123;&quot;access_level&quot;:30&#125;# resp=session.put(url,headers=headers,data=data)# print(resp)","categories":[{"name":"devops","slug":"devops","permalink":"https://biglovewheat.gihub.io/categories/devops/"}],"tags":[{"name":"git","slug":"git","permalink":"https://biglovewheat.gihub.io/tags/git/"},{"name":"python","slug":"python","permalink":"https://biglovewheat.gihub.io/tags/python/"}]},{"title":"Python-Jira-自动受理工单","slug":"python-jira-自动受理工单","date":"2022-08-02T16:00:00.000Z","updated":"2022-09-08T12:24:30.958Z","comments":true,"path":"2022/08/03/python-jira-自动受理工单/","link":"","permalink":"https://biglovewheat.gihub.io/2022/08/03/python-jira-%E8%87%AA%E5%8A%A8%E5%8F%97%E7%90%86%E5%B7%A5%E5%8D%95/","excerpt":"","text":"Python-Jira-自动受理工单12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758#coding:utf-8from bs4 import BeautifulSoupimport sysreload(sys)sys.setdefaultencoding( &quot;utf-8&quot; )import requestsimport bs4import sysimport ioimport datetimeimport commands as cmdbase_url = &#x27;http://10.8.17.24:8080&#x27;log = open(&#x27;/home/piccism/sapchk/jira_zdsl_gdzc.log&#x27;,&#x27;a&#x27;)now_time = datetime.datetime.now()print &gt;&gt;log,now_timedata = &#123;&#x27;os_username&#x27;:&#x27;yangwenwei&#x27;, &#x27;os_password&#x27;:&#x27;1111&#x27;, &#x27;os_cookie&#x27;:&#x27;true&#x27;&#125;login_url = base_url+&#x27;/rest/gadget/1.0/login&#x27;session = requests.Session()resp = session.post(login_url, data)query_url = base_url+&#x27;/secure/IssueNavigator!executeAdvanced.jspa&#x27;query_str = &quot;project = GDZC AND (assignee = aaa or assignee = bbb ) AND status=open&quot;query_data = &#123;&#x27;jqlQuery&#x27;:query_str, &#x27;runQuery&#x27;:&#x27;true&#x27;&#125;resp_query = session.post(query_url, query_data)htmlpage = resp_query.content.decode(&#x27;utf-8&#x27;)soup = BeautifulSoup(htmlpage,&#x27;lxml&#x27;) trs = soup.find_all(&#x27;tr&#x27;,&#123;&quot;rel&quot;:True&#125;)for tr in trs: rel = tr[&#x27;rel&#x27;] tds = tr.find_all(&#x27;td&#x27;) issuekey = tds[1].find(&#x27;a&#x27;).string assignee = tds[3].find(&#x27;a&#x27;).string status = tds[5].contents[2].strip() logstr = &#x27;new job &#x27; +rel+&#x27; &#x27;+issuekey+&#x27; &#x27;+assignee+&#x27; &#x27;+status print &gt;&gt;log,logstr if assignee != &#x27;zvb&#x27;: get_url = base_url+&#x27;/secure/AssignIssue.jspa?id=&#x27;+rel+&#x27;&amp;assignee=yangwenwei&#x27; session.get(get_url) get_url = base_url+&#x27;/secure/WorkflowUIDispatcher.jspa?id=&#x27;+rel+&#x27;&amp;action=4&#x27; session.get(get_url) else: get_url = base_url+&#x27;/secure/WorkflowUIDispatcher.jspa?id=&#x27;+rel+&#x27;&amp;action=4&#x27; session.get(get_url)log.close()","categories":[{"name":"python","slug":"python","permalink":"https://biglovewheat.gihub.io/categories/python/"}],"tags":[{"name":"python","slug":"python","permalink":"https://biglovewheat.gihub.io/tags/python/"}]},{"title":"Linux-设置最大文件打开数","slug":"linux-设置最大文件打开数","date":"2022-08-01T16:00:00.000Z","updated":"2022-09-08T12:24:30.956Z","comments":true,"path":"2022/08/02/linux-设置最大文件打开数/","link":"","permalink":"https://biglovewheat.gihub.io/2022/08/02/linux-%E8%AE%BE%E7%BD%AE%E6%9C%80%E5%A4%A7%E6%96%87%E4%BB%B6%E6%89%93%E5%BC%80%E6%95%B0/","excerpt":"","text":"Linux-设置最大文件打开数系统级123456789## file-max一般为内存大小（KB）的10%来计算，一般我们不需要主动设置这个值，除非这个值确实较小cat /proc/sys/fs/file-max## 修改方法vi /etc/sysctl.conffs.file-max = 2000000## 生效sysctl -p 用户级1234567891011121314## 查看ulimit -a或ulimit -n## 修改（session生效）ulimit -n 65535## 修改（永久）vi /etc/security/limits.conf* soft nofile 65535* hard nofile 65535* soft nproc 65535* hard nproc 65535","categories":[{"name":"linux","slug":"linux","permalink":"https://biglovewheat.gihub.io/categories/linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://biglovewheat.gihub.io/tags/linux/"}]},{"title":"Mysql-Mysqldump-备份恢复","slug":"mysql-mysqldump-备份恢复","date":"2022-08-01T16:00:00.000Z","updated":"2022-09-08T12:24:30.956Z","comments":true,"path":"2022/08/02/mysql-mysqldump-备份恢复/","link":"","permalink":"https://biglovewheat.gihub.io/2022/08/02/mysql-mysqldump-%E5%A4%87%E4%BB%BD%E6%81%A2%E5%A4%8D/","excerpt":"","text":"Mysql-Mysqldump-备份恢复mysqldump备份恢复12345678910111213141516#!/bin/bashROOT_PATH=/mysqldata_backupDATETIME=$(date +&quot;%Y%m%d%H%M&quot;)passwd=$(grep password /etc/my.cnf |awk &#x27;&#123;print $3&#125;&#x27; |head -1)mysqldump -uroot -p$passwd --all-databases --set-gtid-purged=OFF |gzip &gt;$ROOT_PATH/mysqlbackup_all_show_$DATETIME.sql.gz## 上传到aws s3/usr/local/bin/aws s3 cp $ROOT_PATH/mysqlbackup_all_show_$DATETIME.sql.gz s3://aaa/backup/## 清理过期find $ROOT_PATH -mtime +1 -type f -name &quot;*.sql.gz&quot; | xargs rm -vf##恢复#gunzip &lt; test.tar.gz |mysql -hlocalhost -uroot -pxxxxx xtrabackup备份恢复12345678910111213141516171819202122##全量备份$ xtrabackup --backup --target-dir=/data/backups/##异地恢复1-修改root密码为备份数据库密码use mysql；ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;2014Picc!!!&#x27;;ALTER USER &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;2014Picc!!!&#x27;;FLUSH PRIVILEGES;##异地恢复2-新建目录，修改my.cnf指向目录，并修改目录权限mysql:mysql##异地恢复3-准备步骤$ xtrabackup --prepare --target-dir=/&lt;备份文件所在目录&gt;/##异地恢复4-拷贝文件$ xtrabackup --copy-back --target-dir=/&lt;备份文件所在目录&gt;/##异地恢复5-修改目录权限mysql:mysqlchown -R mysql:mysql##启动数据库systemctl start mysql","categories":[{"name":"数据库","slug":"数据库","permalink":"https://biglovewheat.gihub.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"}],"tags":[{"name":"mysql","slug":"mysql","permalink":"https://biglovewheat.gihub.io/tags/mysql/"}]},{"title":"Mysql-RPM-安装","slug":"mysql-rpm-安装","date":"2022-08-01T16:00:00.000Z","updated":"2022-09-08T12:24:30.956Z","comments":true,"path":"2022/08/02/mysql-rpm-安装/","link":"","permalink":"https://biglovewheat.gihub.io/2022/08/02/mysql-rpm-%E5%AE%89%E8%A3%85/","excerpt":"","text":"Mysql-RPM-安装mysql5.7+centos71234567891011121314151617181920212223## 卸载mysql-libsrpm -qa |grep mysqlrpm -e mysql-libs-5.1.73-8.el6_8.x86_64 --nodeps## 安装rpm包rpm -ivh mysql-community-common-5.7.24-1.el6.x86_64.rpmrpm -ivh mysql-community-libs-5.7.24-1.el6.x86_64.rpmrpm -ivh mysql-community-libs-compat-5.7.24-1.el7.x86_64.rpmrpm -ivh mysql-community-client-5.7.24-1.el6.x86_64.rpmrpm -ivh mysql-community-server-5.7.24-1.el6.x86_64.rpm## 启动systemctl start mysqldsystemctl enable mysqld## 初始化cat /var/log/mysqld.log |grep passwordmysql_secure_installationmysql&gt;use mysqlmysql&gt;GRANT ALL PRIVILEGES ON *.* TO &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;123abc!!!&#x27;;mysql&gt;flush privileges;mysql&gt;quit mysql8+centos7123456789101112131415161718192021222324## 卸载mariadbrpm -e $(rpm -qa |grep maria) --nodepsyum install -y net-tools.x86_64 libaio.x86_64 perl.x86_64## 安装rpm包rpm -ivh mysql-community-common-8*.rpmrpm -ivh mysql-community-client-plugins-8*.rpmrpm -ivh mysql-community-libs-8*.rpmrpm -ivh mysql-community-client-8*.rpmrpm -ivh mysql-community-server-8*.rpm## 启动systemctl start mysqldsystemctl enable mysqld## 初始化cat /var/log/mysqld.log |grep passwordmysql_secure_installationmysql&gt;use mysqlmysql&gt;create user &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;123abc!!!&#x27;;mysql&gt;GRANT ALL PRIVILEGES ON *.* TO &#x27;root&#x27;@&#x27;%&#x27;;mysql&gt;flush privileges;mysql&gt;quit","categories":[{"name":"数据库","slug":"数据库","permalink":"https://biglovewheat.gihub.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"}],"tags":[{"name":"mysql","slug":"mysql","permalink":"https://biglovewheat.gihub.io/tags/mysql/"}]},{"title":"Mysql-too-many-connections错误","slug":"mysql-too-many-connections错误","date":"2022-08-01T16:00:00.000Z","updated":"2022-09-08T12:24:30.956Z","comments":true,"path":"2022/08/02/mysql-too-many-connections错误/","link":"","permalink":"https://biglovewheat.gihub.io/2022/08/02/mysql-too-many-connections%E9%94%99%E8%AF%AF/","excerpt":"","text":"Mysql-too-many-connections错误查看最大连接数123456789101112mysql&gt; show variables like &#x27;%max_connections%&#x27;;+-----------------+-------+| Variable_name | Value |+-----------------+-------+| max_connections | 151 |+-----------------+-------+1 row in set (0.00 sec)###修改连接数set global max_connections = 1000;vi /etc/my.cnfmax_connections=1000 查看实时连接数12345678910111213mysql&gt; show status like &#x27;Threads%&#x27;;+-------------------+-------+| Variable_name | Value |+-------------------+-------+| Threads_cached | 1 || Threads_connected | 2 | ###这个数值指的是打开的连接数 | Threads_created | 3 || Threads_running | 2 | ###这个数值指的是激活的连接数，这个数值一般远低于connected数值 +-------------------+-------+4 rows in set (0.03 sec)show processlist; show status like &#x27;Threads%&#x27;; 查看timeout12345show variables like &#x27;%timeout&#x27;;## 设置timeoutset global wait_timeout=300;set global interactive_timeout=500;","categories":[{"name":"数据库","slug":"数据库","permalink":"https://biglovewheat.gihub.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"}],"tags":[{"name":"mysql","slug":"mysql","permalink":"https://biglovewheat.gihub.io/tags/mysql/"}]},{"title":"Shell-获取Mysql查询返回值","slug":"shell-获取mysql查询返回值","date":"2022-08-01T16:00:00.000Z","updated":"2022-09-08T12:24:30.958Z","comments":true,"path":"2022/08/02/shell-获取mysql查询返回值/","link":"","permalink":"https://biglovewheat.gihub.io/2022/08/02/shell-%E8%8E%B7%E5%8F%96mysql%E6%9F%A5%E8%AF%A2%E8%BF%94%E5%9B%9E%E5%80%BC/","excerpt":"","text":"Shell-获取Mysql查询返回值获取单个值1234567891011export MYSQL_PWD=123abc!!!aa=$(mysql -h192.168.8.240 -uroot -Ddatacut -e &quot;select apppath from sys_d_code&quot; --skip-column-names)echo $aauser=rootpass=yfgzSap123port=9901db=datacuttable=sys_d_codeset `mysql -u$user -p$pass -D$db -P $port -e &quot;select outpath from $table&quot;`echo $2 获取多个值12345mysql -uroot -pmysqlroot -Dmmmtest -e &quot;select &#x27;aa&#x27;,count(1) from aa&quot; --skip-column-names|while read a bdoecho $aecho $bdone","categories":[{"name":"数据库","slug":"数据库","permalink":"https://biglovewheat.gihub.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"}],"tags":[{"name":"shell","slug":"shell","permalink":"https://biglovewheat.gihub.io/tags/shell/"},{"name":"mysql","slug":"mysql","permalink":"https://biglovewheat.gihub.io/tags/mysql/"}]},{"title":"Mysql-实现dblink","slug":"mysql-实现dblink","date":"2022-07-31T16:00:00.000Z","updated":"2022-09-08T12:24:30.956Z","comments":true,"path":"2022/08/01/mysql-实现dblink/","link":"","permalink":"https://biglovewheat.gihub.io/2022/08/01/mysql-%E5%AE%9E%E7%8E%B0dblink/","excerpt":"","text":"Mysql-实现dblink版本1Server version: 8.0.23 MySQL Community Server - GPL 查看引擎12345678910111213141516show engines;+--------------------+---------+----------------------------------------------------------------+--------------+------+------------+| Engine | Support | Comment | Transactions | XA | Savepoints |+--------------------+---------+----------------------------------------------------------------+--------------+------+------------+| ARCHIVE | YES | Archive storage engine | NO | NO | NO || BLACKHOLE | YES | /dev/null storage engine (anything you write to it disappears) | NO | NO | NO || MRG_MYISAM | YES | Collection of identical MyISAM tables | NO | NO | NO || FEDERATED | NO | Federated MySQL storage engine | NULL | NULL | NULL || MyISAM | YES | MyISAM storage engine | NO | NO | NO || PERFORMANCE_SCHEMA | YES | Performance Schema | NO | NO | NO || InnoDB | DEFAULT | Supports transactions, row-level locking, and foreign keys | YES | YES | YES || MEMORY | YES | Hash based, stored in memory, useful for temporary tables | NO | NO | NO || CSV | YES | CSV storage engine | NO | NO | NO |+--------------------+---------+----------------------------------------------------------------+--------------+------+------------+#federated 有安装但没有开启 设置参数并重启数据库123echo &quot;federated&quot; &gt;&gt;/etc/my.cnfsystemctl restart mysqld 例子12345CREATE TABLE `t_tasks_operate` ( `id` bigint NOT NULL COMMENT &#x27;主键ID&#x27;, `tasks_id` bigint DEFAULT NULL COMMENT &#x27;调度任务id&#x27;, KEY `tasks_id_index` (`tasks_id`) USING BTREE) ENGINE=FEDERATED DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci ROW_FORMAT=COMPACT CONNECTION=&#x27;mysql://root:123456@192.168.1.1:3306/farm_test/t_tasks_operate&#x27; ;","categories":[{"name":"数据库","slug":"数据库","permalink":"https://biglovewheat.gihub.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"}],"tags":[{"name":"mysql","slug":"mysql","permalink":"https://biglovewheat.gihub.io/tags/mysql/"}]},{"title":"Mysql-数据同步脚本","slug":"mysql-数据同步脚本","date":"2022-07-31T16:00:00.000Z","updated":"2022-09-08T12:24:30.957Z","comments":true,"path":"2022/08/01/mysql-数据同步脚本/","link":"","permalink":"https://biglovewheat.gihub.io/2022/08/01/mysql-%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5%E8%84%9A%E6%9C%AC/","excerpt":"","text":"Mysql-数据同步脚本用mysqldump同步两个数据库 结构12345├── db.lst ## 数据库对照表├── ignore-table.lst ## 只同步结构，不同步数据的表├── mysql_sync.sh ## 主程序├── source.lst ## 源数据库的配置信息└── target.lst ## 目标数据库的配置信息 配置文件1234567891011121314151617181920212223242526272829# cat db.lst##sourcedb|targetdbtelematics|telematicsiot_sit|iotbaseinfo_sit|base_info# cat ignore-table.lst #sourcedb.tablefarm_sit.t_task_machinery_msg_log_20220511smart_farm_test.t_ag_machinery_work_logfarm_sit.t_task_machinery_msg_logsmart_farm_test.um_user_action_logfarm_sit.t_synergy_task_realtime_infosmart_farm_test.t_drainirrigate_eq_log# cat source.lst[client]user=superpassword=123456host=172.31.40.125port=3306# cat target.lst [client]user=rootpassword=123456host=localhostport=3306 脚本123456789101112131415161718192021222324252627282930#!/bin/bashfor db in $(cat db.lst|grep -v ^#)dosdb=$(echo $db|awk -F\\| &#x27;&#123;print $1&#125;&#x27;)tdb=$(echo $db|awk -F\\| &#x27;&#123;print $2&#125;&#x27;)dateecho &quot;sync $sdb --&gt; $tdb &quot;echo &quot;drop database if exists \\`$tdb\\`;&quot;|mysql --defaults-extra-file=target.lstecho &quot;create database \\`$tdb\\`;&quot;|mysql --defaults-extra-file=target.lstif grep -q $x ^$sdb ignore-table.lstthenfor row in $(grep ^$sdb ignore-table.lst)dorow1=$(echo row |awk -F\\. &#x27;&#123;print $2&#125;&#x27;)row2=$rowstr1=$str1&quot; &quot;$row1str2=$str2&quot; --ignore-table &quot;$row2doneecho $str1 $str2mysqldump --defaults-extra-file=source.lst --opt $sdb --tables $str1 --no-data| mysql --defaults-extra-file=target.lst -C $tdbfimysqldump --defaults-extra-file=source.lst --opt $sdb $str2 | mysql --defaults-extra-file=target.lst -C $tdb## no data#mysqldump --defaults-extra-file=source.lst --opt $sdb $str2 --no-data | mysql --defaults-extra-file=target.lst -C $tdbdone","categories":[{"name":"数据库","slug":"数据库","permalink":"https://biglovewheat.gihub.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"}],"tags":[{"name":"shell","slug":"shell","permalink":"https://biglovewheat.gihub.io/tags/shell/"},{"name":"mysql","slug":"mysql","permalink":"https://biglovewheat.gihub.io/tags/mysql/"}]},{"title":"Mysql-数据导入导出","slug":"mysql-文本导入导出","date":"2022-07-31T16:00:00.000Z","updated":"2022-09-08T12:24:30.957Z","comments":true,"path":"2022/08/01/mysql-文本导入导出/","link":"","permalink":"https://biglovewheat.gihub.io/2022/08/01/mysql-%E6%96%87%E6%9C%AC%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA/","excerpt":"","text":"Mysql-数据导入导出导出到文本1234567891011SOURCE_USER=rootSOURCE_DB=aaOUTFILE=aa.txtLoG=aa.log#分隔符|mysql -u$SOURCE_USER -D$SOURCE_DB &lt;&lt;! 2&gt;&gt; $LOG 1&gt;&amp;2select tablename,keymap from cut_table where iskeymap=1into outfile &quot;$OUTFILE&quot;FIELDS TERMINATED BY &#x27;|&#x27; ;! 导入文本12345678910SOURCE_USER=rootSOURCE_DB=aaOUTFILE=aa.txtLoG=aa.log#分隔符|mysql -u$SOURCE_USER -D$SOURCE_DB &lt;&lt;! 2&gt;&gt; $LOG 1&gt;&amp;2load data infile &#x27;$OUTFILE&#x27; into table cut_pkey fields terminated by &#x27;|&#x27;(dbname,list_code,pkeyname,pkeyvalue,status);!","categories":[{"name":"数据库","slug":"数据库","permalink":"https://biglovewheat.gihub.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"}],"tags":[{"name":"shell","slug":"shell","permalink":"https://biglovewheat.gihub.io/tags/shell/"},{"name":"mysql","slug":"mysql","permalink":"https://biglovewheat.gihub.io/tags/mysql/"}]},{"title":"Oracle-用户管理","slug":"oracle-用户管理","date":"2022-07-31T16:00:00.000Z","updated":"2022-09-08T12:24:30.957Z","comments":true,"path":"2022/08/01/oracle-用户管理/","link":"","permalink":"https://biglovewheat.gihub.io/2022/08/01/oracle-%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86/","excerpt":"","text":"Oracle-用户管理创建只读用户123456create user query identified by query default tablespace cc;grant connect to query ;grant SELECT ANY TABLE to query;--grant select on aaa to query;--数据字典权限grant select any dictionary to query; 创建sysdba权限用户123create user zdbackup identified by zdbackup ;grant sysdba to zdbackup;grant create session, connect, resource to zdbackup ; 用户解锁1alter user scott account unlock; 用户更改密码1alter user user01 identified by user10; 不知道密码的情况下，修改新密码等于旧密码123select * from dba_users;FSSC_LINK 737A7F19A6C8315Balter user FSSC_LINK identified by values &#x27;737A7F19A6C8315B&#x27;; 删除用户1drop user xxxDROP USER XXx CASCADE","categories":[{"name":"数据库","slug":"数据库","permalink":"https://biglovewheat.gihub.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"}],"tags":[{"name":"oracle","slug":"oracle","permalink":"https://biglovewheat.gihub.io/tags/oracle/"}]},{"title":"Shell循环例子","slug":"shell-循环例子","date":"2022-07-31T16:00:00.000Z","updated":"2022-09-08T12:24:30.958Z","comments":true,"path":"2022/08/01/shell-循环例子/","link":"","permalink":"https://biglovewheat.gihub.io/2022/08/01/shell-%E5%BE%AA%E7%8E%AF%E4%BE%8B%E5%AD%90/","excerpt":"","text":"Shell循环例子for循环123456789# exmple 1for row in $(cat aa.txt);do echo $row ;sleep 2; done# exmple 3for ((i=1; i&lt;=100; i ++))do echo $idone while循环12345678# exmple 1while true; do date; uptime; sleep 5; done# exmple 2cat a.txt | while read rowdo echo $rowdone","categories":[{"name":"shell","slug":"shell","permalink":"https://biglovewheat.gihub.io/categories/shell/"}],"tags":[{"name":"shell","slug":"shell","permalink":"https://biglovewheat.gihub.io/tags/shell/"}]},{"title":"AWS-EBS-磁盘管理","slug":"aws-ebs-磁盘管理","date":"2022-07-26T16:00:00.000Z","updated":"2022-09-08T12:24:30.952Z","comments":true,"path":"2022/07/27/aws-ebs-磁盘管理/","link":"","permalink":"https://biglovewheat.gihub.io/2022/07/27/aws-ebs-%E7%A3%81%E7%9B%98%E7%AE%A1%E7%90%86/","excerpt":"","text":"AWS-EBS-磁盘管理扩容控制台–&gt;EBS–&gt;volumes–&gt;select ebs–&gt;modify volume，修改后等待卷状态变为正常 123456789101112131415## 查看块设备情况[root@ip-172-31-40-27 ~]# lsblkNAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINTnvme0n1 259:0 0 100G 0 disk├─nvme0n1p1 259:1 0 1M 0 part└─nvme0n1p2 259:2 0 40G 0 part /## 如果是有分区的，把空间分配到对应分区，如disk没有分区，这一步省略sudo growpart /dev/nvme0n1 2## 再增加到对应的文件系统# xfssudo xfs_growfs -d /# ext4sudo resize2fs /dev/nvme0n1p2 新曾磁盘控制台–&gt;EBS–&gt;卷–&gt;创建卷 123456789101112## 查看块设备情况lsblk## 创建挂载点目录mkdir /data## 格式化（xfs）mkfs -t xfs /dev/nvme1n1## 查看uuidblkid## 启动挂载vi /etc/fstabUUID=0cbb74bd-9c5c-4789-8d59-cb6bb2d1038e /data xfs defaults 0 0mount -a 问题12345678910111213## 1xfs_growfs# 错误：unexpected output in sfdisk --version# 解决export LANG=en_US.UTF-8## 2# 相关工具包# centossudo yum install xfsprogs# ubuntuapt install cloud-guest-utils","categories":[{"name":"云原生","slug":"云原生","permalink":"https://biglovewheat.gihub.io/categories/%E4%BA%91%E5%8E%9F%E7%94%9F/"}],"tags":[{"name":"aws","slug":"aws","permalink":"https://biglovewheat.gihub.io/tags/aws/"},{"name":"linux","slug":"linux","permalink":"https://biglovewheat.gihub.io/tags/linux/"},{"name":"fs","slug":"fs","permalink":"https://biglovewheat.gihub.io/tags/fs/"}]},{"title":"MinIO-集群安装","slug":"minio-集群安装","date":"2022-07-26T16:00:00.000Z","updated":"2022-09-08T12:24:30.956Z","comments":true,"path":"2022/07/27/minio-集群安装/","link":"","permalink":"https://biglovewheat.gihub.io/2022/07/27/minio-%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85/","excerpt":"","text":"MinIO-集群安装官方文档https://docs.min.io/minio/baremetal/installation/deploy-minio-distributed.html#deploy-minio-distributed 集群信息12345## 集群至少需要4个文件系统，可用空间为4台空间之和的一半，&gt;=2台，数据可读，&gt;=3台，数据可读写http://172.31.62.161/data/minio/cluster_datahttp://172.31.56.16/data/minio/cluster_datahttp://172.31.57.206/data/minio/cluster_datahttp://172.31.36.28/data/minio/cluster_data 下载1234wget https://dl.min.io/server/minio/release/linux-amd64/miniochmod +x miniowget https://dl.min.io/client/mc/release/linux-amd64/mcchmod +x mc 启动脚本1234567891011cat &lt;&lt; EOF &gt; startup.shexport MINIO_ROOT_USER=&#x27;minioadmin&#x27;export MINIO_ROOT_PASSWORD=&#x27;minioadmin&#x27;nohup /data/minio/minio server --address &quot;:29000&quot; --console-address &quot;:29001&quot; \\http://172.31.62.161/data/minio/cluster_data http://172.31.56.16/data/minio/cluster_data \\http://172.31.57.206/data/minio/cluster_data http://172.31.36.28/data/minio/cluster_data \\&gt;&gt; /data/minio/minio.log 2&gt;&amp;1 &amp;EOFchmod u+x startup.sh 常用操作1234567891011121314### 导入信息（别名）./mc alias set minio-cluster http://172.31.62.161:29000 minioadmin minioadmin./mc alias set XXXX http://XXXX.s3.cn-northwest-1.amazonaws.com.cn/ AXXXXXXX## 列出别名./mc alias list## 查看集群信息./mc admin info hxs3./mc admin info minio-cluster## 对拷./mc mirror minio-prod minio-cluster./mc mirror minio-prod minio-cluster --overwrite","categories":[{"name":"linux","slug":"linux","permalink":"https://biglovewheat.gihub.io/categories/linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://biglovewheat.gihub.io/tags/linux/"},{"name":"fs","slug":"fs","permalink":"https://biglovewheat.gihub.io/tags/fs/"}]},{"title":"Prometheus-mysql-监控","slug":"prometheus-mysql-监控","date":"2022-07-26T16:00:00.000Z","updated":"2022-09-08T12:24:30.957Z","comments":true,"path":"2022/07/27/prometheus-mysql-监控/","link":"","permalink":"https://biglovewheat.gihub.io/2022/07/27/prometheus-mysql-%E7%9B%91%E6%8E%A7/","excerpt":"","text":"Prometheus-mysql-监控mysql创建用户并授权1234drop user &#x27;exporter&#x27;@&#x27;localhost&#x27;;create user &#x27;exporter&#x27;@&#x27;localhost&#x27; identified by &#x27;123456&#x27;; GRANT REPLICATION CLIENT,PROCESS,SELECT ON *.* TO &#x27;exporter&#x27;@&#x27;localhost&#x27; ; flush privileges; mysql-exporter配置1234567891011121314151617181920212223242526# client.cnfcat &lt;&lt; EOF &gt;/opt/mysqld_exporter/.client.cnf[client]user=exporterpassword=123456EOF# systemctl配置cat &lt;&lt; EOF &gt;/usr/lib/systemd/system/mysqld_exporter.service[Unit]Description= Prometheus MySQL ExporterWants=network-online.targetAfter=network-online.target[Service]User=rootGroup=rootType=simpleRestart=alwaysExecStart=/opt/mysqld_exporter/mysqld_exporter \\--config.my-cnf /opt/mysqld_exporter/.client.cnf \\--web.listen-address=0.0.0.0:51235[Install]WantedBy=multi-user.targetEOF prometheus配置12345# 增加配置并重启prometheusprometheus 配置 - job_name: mysql static_configs: - targets: [&#x27;172.31.40.125:51235&#x27;, &#x27;172.31.36.28:51235&#x27;] grafana配置grafana.com&#x2F;grafana&#x2F;dashboards&#x2F; alert-manager告警配置待补充","categories":[{"name":"监控","slug":"监控","permalink":"https://biglovewheat.gihub.io/categories/%E7%9B%91%E6%8E%A7/"}],"tags":[{"name":"mysql","slug":"mysql","permalink":"https://biglovewheat.gihub.io/tags/mysql/"},{"name":"prometheus","slug":"prometheus","permalink":"https://biglovewheat.gihub.io/tags/prometheus/"}]},{"title":"Python-查数据库-邮件告警","slug":"python-查数据库-邮件告警","date":"2022-07-26T16:00:00.000Z","updated":"2022-09-08T12:24:30.958Z","comments":true,"path":"2022/07/27/python-查数据库-邮件告警/","link":"","permalink":"https://biglovewheat.gihub.io/2022/07/27/python-%E6%9F%A5%E6%95%B0%E6%8D%AE%E5%BA%93-%E9%82%AE%E4%BB%B6%E5%91%8A%E8%AD%A6/","excerpt":"","text":"Python-查数据库-邮件告警一个python写的简单的查数据库脚本，配合crontab和邮件实现定时监控和告警。 监控脚本12345678910111213141516171819202122232425262728293031#!/opt/python3/bin/python3import smtplibfrom email.mime.text import MIMETextimport pymysqlimport datetimedd=(datetime.datetime.now()+datetime.timedelta(days=-1)).strftime(&quot;%Y-%m-%d&quot;)print (dd)db = pymysql.Connect(host=&#x27;10.0.0.1&#x27;,port=3306,user=&#x27;root&#x27;,passwd=&#x27;123456&#x27;,db=&#x27;testdb&#x27;,charset=&#x27;utf8&#x27;)cursor = db.cursor()sql = &quot;select * from t_farm where time=&#x27;&quot;+dd+&quot;&#x27;;&quot;cursor.execute(sql)row=cursor.rowcount#print (row)if row == 0 : msg = MIMEText(dd+&#x27;的条目数是: &#x27;+str(row)+&#x27; ,请检查。&#x27;,&#x27;plain&#x27;,&#x27;utf-8&#x27;) from_addr = &#x27;biglovewheat@126.com&#x27; password = &#x27;GQYRFCDKEXEIHQGH&#x27; ## 邮箱的授权密码，非用户密码 to_addr = [&#x27;biglovewheat@126.com&#x27;,&#x27;aa@126.com&#x27;] smtp_server = &#x27;smtp.126.com&#x27; msg[&#x27;From&#x27;] = from_addr msg[&#x27;To&#x27;] = &#x27;,&#x27;.join(to_addr) msg[&#x27;Subject&#x27;] = &#x27;Python脚本告警&#x27; server = smtplib.SMTP_SSL(smtp_server,465) server.login(from_addr,password) server.sendmail(from_addr,to_addr,msg.as_string()) server.quit() crontab131 4 * * * /data/app/moni.py &gt;&gt; /data/app/moni.log 2&gt;&amp;1","categories":[{"name":"监控","slug":"监控","permalink":"https://biglovewheat.gihub.io/categories/%E7%9B%91%E6%8E%A7/"}],"tags":[{"name":"python","slug":"python","permalink":"https://biglovewheat.gihub.io/tags/python/"},{"name":"监控","slug":"监控","permalink":"https://biglovewheat.gihub.io/tags/%E7%9B%91%E6%8E%A7/"}]},{"title":"Rsync同步","slug":"rsync-同步","date":"2022-07-26T16:00:00.000Z","updated":"2022-09-08T12:24:30.958Z","comments":true,"path":"2022/07/27/rsync-同步/","link":"","permalink":"https://biglovewheat.gihub.io/2022/07/27/rsync-%E5%90%8C%E6%AD%A5/","excerpt":"","text":"Rsync同步安装1yum install -y rsync 参数123456789-a 归档模式-v 详细模式-z 传输过程中压缩-u 更新模式-t 保持文件时间-P 显示进度--progress 显示过程中的状态--delete 实现无差异数据同步，删掉dst的文件--exclude 排除,目录相对于src目录 例子123rsync -avzut -P --progress /data/aaa/ root@10.9.127.33:/data/bbb/rsync -avzut -P --progress /var/lib/jenkins/ ops_root@172.31.51.65:/data/backup/jenkins/ --exclude workspace --exclude .cache --exclude .npm 排除列表脚本1234567891011121314151617181920212223242526## 排除列表cat sync_gis.exclude.lstgeoserver/8083/geoserver/8084/logs/geoserver/8084/temp/geoserver/6066/logs/geoserver/6066/temp/geoserver/data/data_8083/#geoserver/data/data_6066/data/test0903geoserver/data/data_6066/logs/geoserver/data/data_6066/gwc/geoserver/data/data_8084/logs/geoserver/data/data_8084/gwc/##!/bin/shdateCMDSTR=&#x27;cd /home/gis/server;rsync -avzut geoserver /s3mnt/gis_data/&#x27;for row in $(cat sync_gis.exclude.lst |grep -v ^# |grep -v ^$);do CMDSTR=$CMDSTR&quot; --exclude &quot;$rowdoneecho $CMDSTR |sh","categories":[{"name":"linux","slug":"linux","permalink":"https://biglovewheat.gihub.io/categories/linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://biglovewheat.gihub.io/tags/linux/"},{"name":"backup","slug":"backup","permalink":"https://biglovewheat.gihub.io/tags/backup/"}]},{"title":"Frp-内网穿透反向代理安装配置","slug":"frp-内网穿透反向代理","date":"2022-07-25T16:00:00.000Z","updated":"2022-09-08T12:24:30.952Z","comments":true,"path":"2022/07/26/frp-内网穿透反向代理/","link":"","permalink":"https://biglovewheat.gihub.io/2022/07/26/frp-%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/","excerpt":"","text":"Frp-内网穿透反向代理安装配置frp 是一个专注于内网穿透的高性能的反向代理应用，支持 TCP、UDP、HTTP、HTTPS 等多种协议。可以将内网服务以安全、便捷的方式通过具有公网 IP 节点的中转暴露到公网。 测试环境12345公网服务器（server端）：IP：68.79.111.111，centos7内网服务器（client端）：IP：192.168.8.211，centos7frp v0.43.0 下载网址，按需下载对应操作系统版本https://github.com/fatedier/frp/release server配置123456789vi frps.ini[common]bind_port = 7111## 启动./frps -c frps.ini## 或后台启动：nohup /data/frp/frps -c /data/frp/frps.ini &gt;&gt;/data/frp/frps.log 2&gt;&amp;1 &amp; client配置1234567891011121314151617## 配置端口映射，这里server端7112映射到client端22端口，其他端口同理。vi frpc.ini[common]server_addr = 68.79.111.111server_port = 7111## ssh 这个标签不能重复，建议用服务+端口命名[ssh_7112]type = tcplocal_ip = 68.79.111.111local_port = 22remote_port = 7112## 启动：./frpc -c frpc.ini## 或后台启动：nohup /data/frp/frpc -c /data/frp/frpc.ini &gt;&gt;/data/frp/frpc.log 2&gt;&amp;1 &amp; 登录测试访问server的外网IP+7112端口，等于访问client端22端口，达到内网穿透的效果。","categories":[{"name":"network","slug":"network","permalink":"https://biglovewheat.gihub.io/categories/network/"}],"tags":[{"name":"frp","slug":"frp","permalink":"https://biglovewheat.gihub.io/tags/frp/"},{"name":"network","slug":"network","permalink":"https://biglovewheat.gihub.io/tags/network/"}]},{"title":"GitLab-备份恢复","slug":"gitlab-备份恢复","date":"2022-07-25T16:00:00.000Z","updated":"2022-09-08T12:24:30.952Z","comments":true,"path":"2022/07/26/gitlab-备份恢复/","link":"","permalink":"https://biglovewheat.gihub.io/2022/07/26/gitlab-%E5%A4%87%E4%BB%BD%E6%81%A2%E5%A4%8D/","excerpt":"","text":"GitLab-备份恢复备份脚本12345678910111213141516171819#!/bin/bashcd /gitlab_jenkins_bakcup/gitlab/DATETIME=$(date +&quot;%Y%m%d%H%M&quot;)FILE1=&quot;gitlab_data_&quot;$&#123;DATETIME&#125;.tarFILE2=&quot;gitlab_config_&quot;$&#123;DATETIME&#125;.tarrm -f /gitlab_jenkins_bakcup/gitlab/*.targitlab-backup creategitlab-ctl backup-etcmv /var/opt/gitlab/backups/*_gitlab_backup.tar $FILE1mv /etc/gitlab/config_backup/gitlab_config*.tar $FILE2/usr/local/bin/aws s3 cp $FILE1 s3://hxs3/backup//usr/local/bin/aws s3 cp $FILE2 s3://hxs3/backup/ 恢复查看版本，备份恢复gitlab版本需一致 http://192.168.8.1:8090/help 13.10.3 安装指定版本 1234567891011cat &lt;&lt; EOF &gt; /etc/yum.repos.d/gitlab-ce.repo[gitlab-ce]name=gitlab-cebaseurl=http://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7repo_gpgcheck=0gpgcheck=0enabled=1EOFyum list gitlab-ce --showduplicatesyum install -y gitlab-ce-13.10.3-ce.0.el7 将配置文件拷贝到 &#x2F;etc&#x2F;gitlab&#x2F; 将备份文件拷贝到 &#x2F;var&#x2F;opt&#x2F;gitlab&#x2F;backups&#x2F; 恢复准备 12345gitlab-ctl reconfiguregitlab-ctl stop unicorngitlab-ctl stop pumagitlab-ctl stop sidekiqgitlab-ctl status 恢复，文件名不包含_gitlab_backup.tar 123mv gitlab_data_202201190445.tar 1633686919_2021_10_08_13.10.3_gitlab_backup.tarmv 1633686919_2021_10_08_13.10.3_gitlab_backup.tar /var/opt/gitlab/backups/gitlab-backup restore BACKUP=1633686919_2021_10_08_13.10.3 重新配置并启动 12gitlab-ctl reconfiguregitlab-ctl restart","categories":[{"name":"devops","slug":"devops","permalink":"https://biglovewheat.gihub.io/categories/devops/"}],"tags":[{"name":"devops","slug":"devops","permalink":"https://biglovewheat.gihub.io/tags/devops/"},{"name":"git","slug":"git","permalink":"https://biglovewheat.gihub.io/tags/git/"}]},{"title":"Jenkins-k8s-发布脚本","slug":"jenkins-k8s-发布脚本","date":"2022-07-25T16:00:00.000Z","updated":"2022-09-08T12:24:30.954Z","comments":true,"path":"2022/07/26/jenkins-k8s-发布脚本/","link":"","permalink":"https://biglovewheat.gihub.io/2022/07/26/jenkins-k8s-%E5%8F%91%E5%B8%83%E8%84%9A%E6%9C%AC/","excerpt":"","text":"Jenkins-k8s-发布脚本发布脚本1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586def createVersion() &#123; return new Date().format(&#x27;yyyyMMddHHmmss&#x27;)&#125;def _version = createVersion()def service = &#x27;hx-python-tianqi&#x27;def git_url = &#x27;http://192.168.8.1/hx-python.git&#x27;def credentialsId = &#x27;0a5e96ae-0443-4e1f-ac0a-e02b3b0e4d81&#x27;def docker_repo = &#x27;10.9.127.243:30002/dev&#x27;def namespaces = &#x27;dev&#x27;pipeline &#123; agent any stages &#123; stage(&#x27;拉取代码&#x27;) &#123; when &#123; environment name: &#x27;action&#x27;, value: &#x27;update&#x27; &#125; steps &#123; checkout([$class: &#x27;GitSCM&#x27;, branches: [[name: branch]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: credentialsId, url: git_url]]]) &#125; &#125; stage(&#x27;构建镜像&#x27;)&#123; when &#123; environment name: &#x27;action&#x27;, value: &#x27;update&#x27; &#125; steps &#123; sh &#x27;&#x27;&#x27; cat &lt;&lt; &#x27;EOF&#x27; &gt; dockerfileFROM jfloff/alpine-pythonMAINTAINER hxkjRUN cp -a /usr/share/zoneinfo/Asia/Shanghai /etc/localtimeCOPY tianqi.py /opt/app.pyRUN pip install requests pymysql beautifulsoup4 -i https://pypi.tuna.tsinghua.edu.cn/simpleWORKDIR /optENTRYPOINT [&quot;python&quot;,&quot;app.py&quot;]EOF&#x27;&#x27;&#x27; sh &quot;docker build -t $&#123;docker_repo&#125;/$&#123;service&#125;:$&#123;_version&#125; .&quot; &#125; &#125; stage(&#x27;推送镜像&#x27;)&#123; when &#123; environment name: &#x27;action&#x27;, value: &#x27;update&#x27; &#125; steps &#123; sh &quot;docker push $&#123;docker_repo&#125;/$&#123;service&#125;:$&#123;_version&#125; &quot; sh &quot;docker rmi $&#123;docker_repo&#125;/$&#123;service&#125;:$&#123;_version&#125; &quot; &#125; &#125; stage(&#x27;升级发布&#x27;)&#123; when &#123; environment name: &#x27;action&#x27;, value: &#x27;update&#x27; &#125; steps &#123; sh &quot;&quot;&quot; cat &lt;&lt; EOF &gt; $&#123;service&#125;.yamlapiVersion: batch/v1beta1kind: CronJobmetadata: name: $&#123;service&#125; namespace: $&#123;namespaces&#125;spec: schedule: &quot;*/15 * * * *&quot; jobTemplate: spec: template: spec: nodeSelector: containers: - name: $&#123;namespaces&#125; image: $&#123;docker_repo&#125;/$&#123;service&#125;:$&#123;_version&#125; imagePullPolicy: IfNotPresent restartPolicy: OnFailureEOF&quot;&quot;&quot; sh &quot;kubectl apply -f $&#123;service&#125;.yaml&quot; &#125; &#125; stage(&#x27;紧急回滚&#x27;)&#123; when &#123; environment name: &#x27;action&#x27;, value: &#x27;rollback&#x27; &#125; steps &#123; sh &quot;kubectl rollout undo deployment/$&#123;service&#125; -n $&#123;namespaces&#125;&quot; &#125; &#125; &#125;&#125;","categories":[{"name":"devops","slug":"devops","permalink":"https://biglovewheat.gihub.io/categories/devops/"}],"tags":[{"name":"devops","slug":"devops","permalink":"https://biglovewheat.gihub.io/tags/devops/"},{"name":"jenkins","slug":"jenkins","permalink":"https://biglovewheat.gihub.io/tags/jenkins/"},{"name":"k8s","slug":"k8s","permalink":"https://biglovewheat.gihub.io/tags/k8s/"}]},{"title":"Jenkins-Systemd-发布脚本","slug":"jenkins-systemd-发布脚本","date":"2022-07-25T16:00:00.000Z","updated":"2022-09-08T12:24:30.954Z","comments":true,"path":"2022/07/26/jenkins-systemd-发布脚本/","link":"","permalink":"https://biglovewheat.gihub.io/2022/07/26/jenkins-systemd-%E5%8F%91%E5%B8%83%E8%84%9A%E6%9C%AC/","excerpt":"","text":"Jenkins-Systemd-发布脚本发布脚本123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102#!/bin/bash## /data/publish.sh update js hx-basic 5 4 &quot;www-test/&quot;action=$1apptype=$2svc=$3ver=$4webpath=$6## envROOT=/data#TEMP_HOME=$ROOT/tmpcase $apptype in## java&#x27;java&#x27;) if [ ! -f /usr/lib/systemd/system/$svc.service ];then if [ ! -f $ROOT/java_demo.service ];then echo &quot;java_demo.service not found&quot;; exit ; fi sed &quot;s/__SVC__/$&#123;svc&#125;/g&quot; $ROOT/java_demo.service &gt; /usr/lib/systemd/system/$svc.service systemctl daemon-reload systemctl enable $svc.service fi case $action in &#x27;restart&#x27;) systemctl restart $svc.service ;; &#x27;update&#x27;) ln -snf $ROOT/temp/$&#123;svc&#125;-$&#123;ver&#125;.jar $ROOT/app/$&#123;svc&#125;.jar systemctl restart $svc.service ls -t $ROOT/temp/$&#123;svc&#125;*.jar | sed -n &#x27;11,$p&#x27; | xargs rm -vf ;; &#x27;stop&#x27;) systemctl stop $svc.service ;; &#x27;restore&#x27;) ver=$5 ln -snf $ROOT/temp/$&#123;svc&#125;-$&#123;ver&#125;.jar $ROOT/app/$&#123;svc&#125;.jar systemctl restart $svc.service ;; *) ;; esac;;## js&#x27;js&#x27;) case $action in update) rm -rf $ROOT/webapp/$webpath mkdir -p $ROOT/webapp/$webpath tar -xf $ROOT/temp/$svc-$ver.tgz -C $ROOT/webapp/$webpath ls -t $ROOT/temp/$&#123;svc&#125;*.tgz | sed -n &#x27;11,$p&#x27; | xargs rm -vf ;; restore) ver=$5 rm -rf $ROOT/webapp/$&#123;webpath&#125; mkdir -p $ROOT/webapp/$webpath tar -xf $ROOT/temp/$svc-$ver.tgz -C $ROOT/webapp/$webpath ;; *) ;; esac;;&#x27;autotest&#x27;) case $action in update) rm -rf $ROOT/autotest/web/$svc rm -rf $ROOT/autotest/web/$&#123;svc&#125;*.html rm -rf $ROOT/autotest/web/$&#123;svc&#125;*.log mkdir -p $ROOT/autotest/web/$svc/&#123;logs,screen_shot&#125; rm -rf $ROOT/autotest/$svc mkdir -p $ROOT/autotest/$svc/ChromeDriver/linux/ export PATH=/opt/python3/bin:$PATH tar -xf $ROOT/temp/$svc-$ver.tgz -C $ROOT/autotest/$svc rm -rf /data/autotest/$&#123;svc&#125;/ChromeDriver/linux/chromedriver rm -rf /data/autotest/$&#123;svc&#125;/CommonLibrary/chromedriver.exe ln -sf $ROOT/autotest/chromedriver /data/autotest/$&#123;svc&#125;/ChromeDriver/linux/chromedriver ln -sf $ROOT/autotest/chromedriver /data/autotest/$&#123;svc&#125;/CommonLibrary/chromedriver.exe cd /data/autotest/$svc &amp;&amp; python3 ./runs/run.py &gt; $ROOT/autotest/web/$&#123;svc&#125;.log 2&gt;&amp;1 \\cp -rf $ROOT/autotest/$svc/reports/TestResult.html $ROOT/autotest/web/$&#123;svc&#125;_TestResult.html \\cp -rf $ROOT/autotest/$svc/logs/*.log $ROOT/autotest/web/$&#123;svc&#125;/logs/ \\cp -rf $ROOT/autotest/$svc/screen_shot/*.png $ROOT/autotest/web/$&#123;svc&#125;/screen_shot/ sed -i &#x27;s|http://127.0.0.1/show_log/?log_path=/data/autotest/|http://autotest.farmbgy.com/|g&#x27; $ROOT/autotest/web/$&#123;svc&#125;_TestResult.html sed -i &#x27;s|http://127.0.0.1/show_photo/?pic_path=/data/autotest/|http://autotest.farmbgy.com/|g&#x27; $ROOT/autotest/web/$&#123;svc&#125;_TestResult.html sed -i &#x27;s|http://127.0.0.1:5000/show_log/?log_path=/data/autotest/|http://autotest.farmbgy.com/|g&#x27; $ROOT/autotest/web/$&#123;svc&#125;_TestResult.html sed -i &#x27;s|http://127.0.0.1:5000/show_photo/?pic_path=/data/autotest/|http://autotest.farmbgy.com/|g&#x27; $ROOT/autotest/web/$&#123;svc&#125;_TestResult.html ;; *) ;; esac;;## other*);;esac Service java_demo.service123456789101112131415161718cat &lt;&lt; EOF &gt; java_demo.service[Unit]Description=__SVC__After=network.target[Service]Type=forkingUser=rootEnvironment=&quot;SVC=__SVC__&quot;ExecStart=/data/start_jar.sh start $&#123;SVC&#125;ExecReload=/bin/kill -s HUP $MAINPIDExecStop=/bin/kill -s QUIT $MAINPID#Restart=always[Install]WantedBy=multi-user.targetEOF 启动脚本12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061#!/bin/bashsvc=$2## dirAPP_HOME=/data/appLOG_HOME=/data/logsif [ ! -d $&#123;LOG_HOME&#125;/analyzeGc ]; then mkdir -p $&#123;LOG_HOME&#125;/analyzeGc; fi## nacosexport nacos_address=&quot;172.31.71.117&quot;export nacos_port=&quot;8848&quot;export nacos_namespace=&#x27;c876967c-d8dd-4318-9bf1-e7e72eb47d13&#x27;## javaexport JAVA_HOME=/data/soft/jdk-11.0.11export PATH=$JAVA_HOME/bin:$PATHexport CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar## app envcase $svc in&#x27;hx-schedule-algorithm&#x27;)JAVA_OPS=&quot;-Xms512m -Xmx4g -Xmn1g -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=$&#123;LOG_HOME&#125;/analyzeGc/ -XX:+PrintGCDetails -verbosegc -Xloggc:$&#123;LOG_HOME&#125;/analyzeGc/gc.$&#123;svc&#125;.log&quot;;;*)JAVA_OPS=&quot;-Xms512m -Xmx2g -Xmn1g -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=$&#123;LOG_HOME&#125;/analyzeGc/ -XX:+PrintGCDetails -verbosegc -Xloggc:$&#123;LOG_HOME&#125;/analyzeGc/gc.$&#123;svc&#125;.log&quot;;;esaccase $svc in#&#x27;hx-thirdparty&#x27;|&#x27;hx-sensordata&#x27;)&#x27;hx-thirdparty&#x27;)SPRING_ENV=prod ## prod,sit,local;;*)SPRING_ENV=local ## prod,sit,local;;esaccase $1 instart) nohup java $&#123;JAVA_OPS&#125; -jar $&#123;APP_HOME&#125;/$&#123;svc&#125;.jar --spring.profiles.active=$&#123;SPRING_ENV&#125; &gt;&gt; $&#123;APP_HOME&#125;/$&#123;svc&#125;.log 2&gt;&amp;1 &amp;;;restart) $0 stop $svc sleep 2 $0 start $svc;;stop) PID=`jps |grep $&#123;svc&#125;|awk &#x27;&#123;print $1&#125;&#x27;` if [ -z &quot;$PID&quot; ]; then echo &quot;no pid found. $0 no start&quot; else kill -9 $PID &amp;&amp; echo &quot;kill pid $PID success.&quot; || echo &quot;kill pid $PID failed.&quot; fi;;*) echo &quot;Usage: $0 [start|restart|update|stop|restore|log|check]&quot; exit 0esac","categories":[{"name":"devops","slug":"devops","permalink":"https://biglovewheat.gihub.io/categories/devops/"}],"tags":[{"name":"devops","slug":"devops","permalink":"https://biglovewheat.gihub.io/tags/devops/"},{"name":"shell","slug":"shell","permalink":"https://biglovewheat.gihub.io/tags/shell/"},{"name":"jenkins","slug":"jenkins","permalink":"https://biglovewheat.gihub.io/tags/jenkins/"}]},{"title":"Nacos集群配置","slug":"nacos-集群配置","date":"2022-07-25T16:00:00.000Z","updated":"2022-09-08T12:24:30.957Z","comments":true,"path":"2022/07/26/nacos-集群配置/","link":"","permalink":"https://biglovewheat.gihub.io/2022/07/26/nacos-%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE/","excerpt":"","text":"Nacos集群配置版本v1.4.1 cluster.conf配置123192.168.8.111:8848192.168.8.112:8848192.168.8.113:8848 初始化数据库1mysql -uroot -p &lt; /data/nacos/conf/nacos-mysql.sql application.properties配置，集群必须用外部存储，这里用mysql123456### Count of DB:db.num=1### Connect URL of DB:db.url.0=jdbc:mysql://192.168.8.111:3306/nacos?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useUnicode=true&amp;useSSL=false&amp;serverTimezone=UTC&amp;allowPublicKeyRetrieval=truedb.user.0=rootdb.password.0=123456 启动脚本12345678#!/bin/shexport JAVA_HOME=/data/soft/jdk-11.0.11export PATH=$JAVA_HOME/bin:$PATHexport CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar## 单机sh /data/nacos/bin/startup.sh -m standalone## 集群sh /data/nacos/bin/startup.sh","categories":[{"name":"middleware","slug":"middleware","permalink":"https://biglovewheat.gihub.io/categories/middleware/"}],"tags":[{"name":"middleware","slug":"middleware","permalink":"https://biglovewheat.gihub.io/tags/middleware/"},{"name":"nacos","slug":"nacos","permalink":"https://biglovewheat.gihub.io/tags/nacos/"}]},{"title":"Python-端口监控-钉钉告警","slug":"python-端口监控-钉钉告警","date":"2022-07-25T16:00:00.000Z","updated":"2022-09-08T12:24:30.958Z","comments":true,"path":"2022/07/26/python-端口监控-钉钉告警/","link":"","permalink":"https://biglovewheat.gihub.io/2022/07/26/python-%E7%AB%AF%E5%8F%A3%E7%9B%91%E6%8E%A7-%E9%92%89%E9%92%89%E5%91%8A%E8%AD%A6/","excerpt":"","text":"Python-端口监控-钉钉告警一个python写的简单的端口监控例子，配合crontab和钉钉实现定时监控和告警。 配置文件12345678910111213141516171819[root@aws-sit-server-dev-01 moni]# cat moni_port.lstgis|172.31.45.42|6066gis|172.31.45.42|8083gis|172.31.45.42|8084sit-mq|172.31.40.27|9876sit-gitlab|172.31.40.27|8090sit-jenkins|172.31.40.27|8089sit-nacos|172.31.40.27|8848sit-redis|172.31.40.125|6379sit-mysql|172.31.40.125|3306sit-nexus|172.31.45.187|8081show-mq|172.31.73.65|9876show-mysql|172.31.73.65|3306show-nacos|172.31.73.65|8848show-redis|172.31.73.65|6379jx-mq|172.31.71.117|9876jx-mysql|172.31.71.117|3306jx-nacos|172.31.71.117|8848jx-redis|172.31.71.117|6378 监控脚本123456789101112131415161718192021222324252627282930313233#!/opt/python3/bin/python3import datetimeimport socket,sysimport requests,jsondef send_dingding(url, msg): headers = &#123;&#x27;Content-Type&#x27;: &#x27;application/json&#x27;&#125; data = &#123; &quot;msgtype&quot;: &quot;text&quot;, &quot;text&quot;: &#123; &quot;content&quot;: msg &#125; &#125; r = requests.post(url, headers=headers, data=json.dumps(data)) print(r.text)if __name__ == &quot;__main__&quot;: url_dingding = &#x27;https://oapi.dingtalk.com/robot/send?access_token=abcd&#x27; msg=&#x27;&#x27; with open(r&#x27;/data/moni/moni_port.lst&#x27;) as f: for row in f.readlines(): # print(row.strip()) r1,r2,r3=row.strip().split(&#x27;|&#x27;,2) moni_host=r1 moni_ip=r2 moni_port=r3 port_state=socket.socket(socket.AF_INET,socket.SOCK_STREAM).connect_ex((moni_ip,int(moni_port))) if port_state != 0 : msg=msg+moni_host+&quot; &quot;+moni_ip+&quot;:&quot;+moni_port+&quot; has been down. Please check.\\n&quot; if len(msg) &gt; 2: print(datetime.datetime.now()) print(msg) send_dingding(url_dingding,msg)","categories":[{"name":"监控","slug":"监控","permalink":"https://biglovewheat.gihub.io/categories/%E7%9B%91%E6%8E%A7/"}],"tags":[{"name":"python","slug":"python","permalink":"https://biglovewheat.gihub.io/tags/python/"},{"name":"监控","slug":"监控","permalink":"https://biglovewheat.gihub.io/tags/%E7%9B%91%E6%8E%A7/"}]},{"title":"Rocketmq-DLeger-集群安装","slug":"rocketmq-dleger-集群安装","date":"2022-07-25T16:00:00.000Z","updated":"2022-09-08T12:24:30.958Z","comments":true,"path":"2022/07/26/rocketmq-dleger-集群安装/","link":"","permalink":"https://biglovewheat.gihub.io/2022/07/26/rocketmq-dleger-%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85/","excerpt":"","text":"Rocketmq-DLeger-集群安装官方文档More Info: 官方文档 More Info: rocketmq-dashbord 部署主机123172.31.34.25 aws-sit-app-01 172.31.43.98 aws-sit-app-03172.31.43.45 aws-sit-app-04 配置文件123456789101112131415161718/data/rocketmq/conf/dledger/broker-n*.confbrokerClusterName = RaftClusterbrokerName=RaftNode00listenPort=30911namesrvAddr=172.31.34.25:9876;172.31.43.98:9876;172.31.43.45:9876storePathRootDir=/tmp/rmqstore/node00storePathCommitLog=/tmp/rmqstore/node00/commitlogenableDLegerCommitLog=truedLegerGroup=RaftNode00dLegerPeers=n0-172.31.34.25:40911;n1-172.31.43.98:40911;n2-172.31.43.45:40911##每个节点更改n0、n1、n2dLegerSelfId=n0sendMessageThreadPoolNums=4##自动创建topicautoCreateTopicEnable = true## 执行broker ip（多网卡适用）#brokerIP1=10.19.73.64 启动脚本1234567891011#!/bin/shexport JAVA_HOME=/data/soft/jdk1.8.0_301export PATH=$JAVA_HOME/bin:$PATHROOT_PATH=/data/rocketmqnohup sh $ROOT_PATH/bin/mqnamesrv &gt; $ROOT_PATH/startup.log 2&gt;&amp;1 &amp;nohup sh $ROOT_PATH/bin/mqbroker -c $ROOT_PATH/conf/dledger/broker-n0.conf &gt;&gt; $ROOT_PATH/startup.log 2&gt;&amp;1 &amp;## mq consolenohup java -jar $ROOT_PATH/rocketmq-dashboard-1.0.1-SNAPSHOT.jar --server.port=9801 \\--rocketmq.config.namesrvAddr=tcp.farmbgy.net:29876 &gt; $ROOT_PATH/startDashboard.log 2&gt;&amp;1 &amp; systemd-service123456789101112131415161718192021cat &lt;&lt; EOF &gt; /usr/lib/systemd/system/rocketmq.service[Unit]Description=rocketmqAfter=network.target[Service]Type=forkingUser=rootExecStart=/data/rocketmq/startup.shExecStop=/data/rocketmq/stop.sh[Install]WantedBy=multi-user.targetEOFsystemctl daemon-reloadsystemctl enable rocketmqsystemctl start rocketmqsystemctl stop rocketmq","categories":[{"name":"middleware","slug":"middleware","permalink":"https://biglovewheat.gihub.io/categories/middleware/"}],"tags":[{"name":"middleware","slug":"middleware","permalink":"https://biglovewheat.gihub.io/tags/middleware/"},{"name":"mq","slug":"mq","permalink":"https://biglovewheat.gihub.io/tags/mq/"}]},{"title":"Shell并发执行","slug":"shell-并发处理","date":"2022-07-25T16:00:00.000Z","updated":"2022-09-08T12:24:30.958Z","comments":true,"path":"2022/07/26/shell-并发处理/","link":"","permalink":"https://biglovewheat.gihub.io/2022/07/26/shell-%E5%B9%B6%E5%8F%91%E5%A4%84%E7%90%86/","excerpt":"","text":"shell并发处理并发执行12345678910111213141516171819202122[root@std_centos test]# cat aa.shf1()&#123;tail -f 1.txt&#125;f2()&#123;tail -f 2.txt&#125;f3()&#123;tail -f 3.txt&#125;f4()&#123;echo &quot;finished&quot;&#125;f1 &amp; #f1-f3 并发执行f2 &amp;f3 &amp;wait #wait的作用：等待前面的函数执行完成f4 #最后执行f4 控制并发进程数12345678910111213141516171819202122[root@std_centos test]# cat cc.shtempfifo=/tmp/$$.fifo ##获取当前程序的pid，以pid作为文件名，防止重复。mkfifo $tempfifo ##创建有名管道文件exec 1000&lt;&gt;$tempfifo ##将文件描述符1000与管道文件关联rm -rf $tempfifo ##删除管道文件，只保留文件描述符for ((i=1; i&lt;=3; i++)) ##写入3行（空行）到文件描述符1000doecho &gt;&amp;1000donefor ((j=1;j&lt;=10;j++)) ##队列总共10个doread -u1000 ##读取1个空行（读取后，文件描述符减少1个空行，如没空行则hold住等待，知道有新增空行，以达到进程数控制的效果）&#123;tail -f $j.txtecho &gt;&amp;1000 ##写入1个空行（写入后，文件描述符又增加1个空行）&#125;&amp;echo &quot;running:&quot;$jdonewaitexec 1000&lt;&amp;- #关闭文件描述符的读exec 1000&gt;&amp;-echo &quot;--finished--&quot;","categories":[{"name":"shell","slug":"shell","permalink":"https://biglovewheat.gihub.io/categories/shell/"}],"tags":[{"name":"shell","slug":"shell","permalink":"https://biglovewheat.gihub.io/tags/shell/"}]}],"categories":[{"name":"devops","slug":"devops","permalink":"https://biglovewheat.gihub.io/categories/devops/"},{"name":"数据库","slug":"数据库","permalink":"https://biglovewheat.gihub.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"python","slug":"python","permalink":"https://biglovewheat.gihub.io/categories/python/"},{"name":"故障排查","slug":"故障排查","permalink":"https://biglovewheat.gihub.io/categories/%E6%95%85%E9%9A%9C%E6%8E%92%E6%9F%A5/"},{"name":"linux","slug":"linux","permalink":"https://biglovewheat.gihub.io/categories/linux/"},{"name":"理论知识","slug":"理论知识","permalink":"https://biglovewheat.gihub.io/categories/%E7%90%86%E8%AE%BA%E7%9F%A5%E8%AF%86/"},{"name":"云原生","slug":"云原生","permalink":"https://biglovewheat.gihub.io/categories/%E4%BA%91%E5%8E%9F%E7%94%9F/"},{"name":"基础概念","slug":"基础概念","permalink":"https://biglovewheat.gihub.io/categories/%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/"},{"name":"middleware","slug":"middleware","permalink":"https://biglovewheat.gihub.io/categories/middleware/"},{"name":"日志","slug":"日志","permalink":"https://biglovewheat.gihub.io/categories/%E6%97%A5%E5%BF%97/"},{"name":"监控","slug":"监控","permalink":"https://biglovewheat.gihub.io/categories/%E7%9B%91%E6%8E%A7/"},{"name":"安全","slug":"安全","permalink":"https://biglovewheat.gihub.io/categories/%E5%AE%89%E5%85%A8/"},{"name":"shell","slug":"shell","permalink":"https://biglovewheat.gihub.io/categories/shell/"},{"name":"gis","slug":"gis","permalink":"https://biglovewheat.gihub.io/categories/gis/"},{"name":"network","slug":"network","permalink":"https://biglovewheat.gihub.io/categories/network/"}],"tags":[{"name":"ansible","slug":"ansible","permalink":"https://biglovewheat.gihub.io/tags/ansible/"},{"name":"oracle","slug":"oracle","permalink":"https://biglovewheat.gihub.io/tags/oracle/"},{"name":"docker","slug":"docker","permalink":"https://biglovewheat.gihub.io/tags/docker/"},{"name":"postgresql","slug":"postgresql","permalink":"https://biglovewheat.gihub.io/tags/postgresql/"},{"name":"python","slug":"python","permalink":"https://biglovewheat.gihub.io/tags/python/"},{"name":"nacos","slug":"nacos","permalink":"https://biglovewheat.gihub.io/tags/nacos/"},{"name":"java","slug":"java","permalink":"https://biglovewheat.gihub.io/tags/java/"},{"name":"devops","slug":"devops","permalink":"https://biglovewheat.gihub.io/tags/devops/"},{"name":"k8s","slug":"k8s","permalink":"https://biglovewheat.gihub.io/tags/k8s/"},{"name":"lvs","slug":"lvs","permalink":"https://biglovewheat.gihub.io/tags/lvs/"},{"name":"keepalived","slug":"keepalived","permalink":"https://biglovewheat.gihub.io/tags/keepalived/"},{"name":"ssl","slug":"ssl","permalink":"https://biglovewheat.gihub.io/tags/ssl/"},{"name":"aws","slug":"aws","permalink":"https://biglovewheat.gihub.io/tags/aws/"},{"name":"s3","slug":"s3","permalink":"https://biglovewheat.gihub.io/tags/s3/"},{"name":"阿里云","slug":"阿里云","permalink":"https://biglovewheat.gihub.io/tags/%E9%98%BF%E9%87%8C%E4%BA%91/"},{"name":"nexus","slug":"nexus","permalink":"https://biglovewheat.gihub.io/tags/nexus/"},{"name":"正则表达式","slug":"正则表达式","permalink":"https://biglovewheat.gihub.io/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"},{"name":"middleware","slug":"middleware","permalink":"https://biglovewheat.gihub.io/tags/middleware/"},{"name":"redis","slug":"redis","permalink":"https://biglovewheat.gihub.io/tags/redis/"},{"name":"日志","slug":"日志","permalink":"https://biglovewheat.gihub.io/tags/%E6%97%A5%E5%BF%97/"},{"name":"linux","slug":"linux","permalink":"https://biglovewheat.gihub.io/tags/linux/"},{"name":"mysql","slug":"mysql","permalink":"https://biglovewheat.gihub.io/tags/mysql/"},{"name":"git","slug":"git","permalink":"https://biglovewheat.gihub.io/tags/git/"},{"name":"jenkins","slug":"jenkins","permalink":"https://biglovewheat.gihub.io/tags/jenkins/"},{"name":"监控","slug":"监控","permalink":"https://biglovewheat.gihub.io/tags/%E7%9B%91%E6%8E%A7/"},{"name":"安全","slug":"安全","permalink":"https://biglovewheat.gihub.io/tags/%E5%AE%89%E5%85%A8/"},{"name":"shell","slug":"shell","permalink":"https://biglovewheat.gihub.io/tags/shell/"},{"name":"http","slug":"http","permalink":"https://biglovewheat.gihub.io/tags/http/"},{"name":"基础概念","slug":"基础概念","permalink":"https://biglovewheat.gihub.io/tags/%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/"},{"name":"nginx","slug":"nginx","permalink":"https://biglovewheat.gihub.io/tags/nginx/"},{"name":"gitlab","slug":"gitlab","permalink":"https://biglovewheat.gihub.io/tags/gitlab/"},{"name":"gis","slug":"gis","permalink":"https://biglovewheat.gihub.io/tags/gis/"},{"name":"fs","slug":"fs","permalink":"https://biglovewheat.gihub.io/tags/fs/"},{"name":"prometheus","slug":"prometheus","permalink":"https://biglovewheat.gihub.io/tags/prometheus/"},{"name":"backup","slug":"backup","permalink":"https://biglovewheat.gihub.io/tags/backup/"},{"name":"frp","slug":"frp","permalink":"https://biglovewheat.gihub.io/tags/frp/"},{"name":"network","slug":"network","permalink":"https://biglovewheat.gihub.io/tags/network/"},{"name":"mq","slug":"mq","permalink":"https://biglovewheat.gihub.io/tags/mq/"}]}